// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: merchant_policies.sql

package db

import (
	"context"
	"database/sql"
)

const createMerchantPolicy = `-- name: CreateMerchantPolicy :one
INSERT INTO merchant_policies (
    merchant_id,
    policy_type,
    title,
    description
) VALUES (
    $1, $2, $3, $4
)
RETURNING merchant_policy_id, merchant_id, policy_type, title, description, created_at, updated_at, deleted_at
`

type CreateMerchantPolicyParams struct {
	MerchantID  int32  `json:"merchant_id"`
	PolicyType  string `json:"policy_type"`
	Title       string `json:"title"`
	Description string `json:"description"`
}

// CreateMerchantPolicy: Inserts a new merchant policy
// Purpose: Register a new policy for a merchant
// Parameters:
//
//	$1: merchant_id
//	$2: policy_type
//	$3: title
//	$4: description
//
// Returns: The newly created policy record
// Business Logic:
//   - Sets created_at, updated_at automatically
func (q *Queries) CreateMerchantPolicy(ctx context.Context, arg CreateMerchantPolicyParams) (*MerchantPolicy, error) {
	row := q.db.QueryRowContext(ctx, createMerchantPolicy,
		arg.MerchantID,
		arg.PolicyType,
		arg.Title,
		arg.Description,
	)
	var i MerchantPolicy
	err := row.Scan(
		&i.MerchantPolicyID,
		&i.MerchantID,
		&i.PolicyType,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const deleteAllMerchantPolicyPermanently = `-- name: DeleteAllMerchantPolicyPermanently :exec
DELETE FROM merchant_policies
WHERE deleted_at IS NOT NULL
`

// DeleteMerchantPolicyPermanently: Hard-deletes a policy record
// Purpose: Permanently remove a soft-deleted policy
// Parameters:
//
//	$1: merchant_policy_id
//
// Business Logic:
//   - Irreversible delete
//   - Only affects already soft-deleted records
func (q *Queries) DeleteAllMerchantPolicyPermanently(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllMerchantPolicyPermanently)
	return err
}

const deleteMerchantPolicyPermanently = `-- name: DeleteMerchantPolicyPermanently :exec
DELETE FROM merchant_policies
WHERE merchant_policy_id = $1
  AND deleted_at IS NOT NULL
`

// DeleteMerchantPolicyPermanently: Hard-deletes a policy record
// Purpose: Permanently remove a soft-deleted policy
// Parameters:
//
//	$1: merchant_policy_id
//
// Business Logic:
//   - Irreversible delete
//   - Only affects already soft-deleted records
func (q *Queries) DeleteMerchantPolicyPermanently(ctx context.Context, merchantPolicyID int32) error {
	_, err := q.db.ExecContext(ctx, deleteMerchantPolicyPermanently, merchantPolicyID)
	return err
}

const getMerchantPolicies = `-- name: GetMerchantPolicies :many
SELECT 
    mp.merchant_policy_id, mp.merchant_id, mp.policy_type, mp.title, mp.description, mp.created_at, mp.updated_at, mp.deleted_at,
    m.name AS merchant_name,
    COUNT(*) OVER() AS total_count
FROM merchant_policies mp
JOIN merchants m ON mp.merchant_id = m.merchant_id
WHERE LOWER(m.name) LIKE LOWER(CONCAT('%', $1::text, '%'))
LIMIT $2 OFFSET $3
`

type GetMerchantPoliciesParams struct {
	Column1 string `json:"column_1"`
	Limit   int32  `json:"limit"`
	Offset  int32  `json:"offset"`
}

type GetMerchantPoliciesRow struct {
	MerchantPolicyID int32        `json:"merchant_policy_id"`
	MerchantID       int32        `json:"merchant_id"`
	PolicyType       string       `json:"policy_type"`
	Title            string       `json:"title"`
	Description      string       `json:"description"`
	CreatedAt        sql.NullTime `json:"created_at"`
	UpdatedAt        sql.NullTime `json:"updated_at"`
	DeletedAt        sql.NullTime `json:"deleted_at"`
	MerchantName     string       `json:"merchant_name"`
	TotalCount       int64        `json:"total_count"`
}

// GetMerchantPolicies: Retrieves all merchant policies regardless of merchant status
// Parameters:
//
//	$1: search - Keyword to filter merchant_name (case-insensitive, partial match)
//	$2: limit - Pagination limit
//	$3: offset - Pagination offset
//
// Returns: Merchant policy records with merchant name and total_count
func (q *Queries) GetMerchantPolicies(ctx context.Context, arg GetMerchantPoliciesParams) ([]*GetMerchantPoliciesRow, error) {
	rows, err := q.db.QueryContext(ctx, getMerchantPolicies, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetMerchantPoliciesRow
	for rows.Next() {
		var i GetMerchantPoliciesRow
		if err := rows.Scan(
			&i.MerchantPolicyID,
			&i.MerchantID,
			&i.PolicyType,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.MerchantName,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMerchantPoliciesActive = `-- name: GetMerchantPoliciesActive :many
SELECT 
    mp.merchant_policy_id, mp.merchant_id, mp.policy_type, mp.title, mp.description, mp.created_at, mp.updated_at, mp.deleted_at,
    m.name AS merchant_name,
    COUNT(*) OVER() AS total_count
FROM merchant_policies mp
JOIN merchants m ON mp.merchant_id = m.merchant_id
WHERE m.deleted_at IS NULL
  AND LOWER(m.name) LIKE LOWER(CONCAT('%', $1::text, '%'))
LIMIT $2 OFFSET $3
`

type GetMerchantPoliciesActiveParams struct {
	Column1 string `json:"column_1"`
	Limit   int32  `json:"limit"`
	Offset  int32  `json:"offset"`
}

type GetMerchantPoliciesActiveRow struct {
	MerchantPolicyID int32        `json:"merchant_policy_id"`
	MerchantID       int32        `json:"merchant_id"`
	PolicyType       string       `json:"policy_type"`
	Title            string       `json:"title"`
	Description      string       `json:"description"`
	CreatedAt        sql.NullTime `json:"created_at"`
	UpdatedAt        sql.NullTime `json:"updated_at"`
	DeletedAt        sql.NullTime `json:"deleted_at"`
	MerchantName     string       `json:"merchant_name"`
	TotalCount       int64        `json:"total_count"`
}

// GetMerchantPoliciesActive: Retrieves merchant policies for active merchants
// Parameters:
//
//	$1: search - Keyword to filter merchant_name (case-insensitive, partial match)
//	$2: limit - Pagination limit
//	$3: offset - Pagination offset
//
// Returns: Active merchant policy records with merchant name and total_count
func (q *Queries) GetMerchantPoliciesActive(ctx context.Context, arg GetMerchantPoliciesActiveParams) ([]*GetMerchantPoliciesActiveRow, error) {
	rows, err := q.db.QueryContext(ctx, getMerchantPoliciesActive, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetMerchantPoliciesActiveRow
	for rows.Next() {
		var i GetMerchantPoliciesActiveRow
		if err := rows.Scan(
			&i.MerchantPolicyID,
			&i.MerchantID,
			&i.PolicyType,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.MerchantName,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMerchantPoliciesTrashed = `-- name: GetMerchantPoliciesTrashed :many
SELECT 
    mp.merchant_policy_id, mp.merchant_id, mp.policy_type, mp.title, mp.description, mp.created_at, mp.updated_at, mp.deleted_at,
    m.name AS merchant_name,
    COUNT(*) OVER() AS total_count
FROM merchant_policies mp
JOIN merchants m ON mp.merchant_id = m.merchant_id
WHERE m.deleted_at IS NOT NULL
  AND LOWER(m.name) LIKE LOWER(CONCAT('%', $1::text, '%'))
LIMIT $2 OFFSET $3
`

type GetMerchantPoliciesTrashedParams struct {
	Column1 string `json:"column_1"`
	Limit   int32  `json:"limit"`
	Offset  int32  `json:"offset"`
}

type GetMerchantPoliciesTrashedRow struct {
	MerchantPolicyID int32        `json:"merchant_policy_id"`
	MerchantID       int32        `json:"merchant_id"`
	PolicyType       string       `json:"policy_type"`
	Title            string       `json:"title"`
	Description      string       `json:"description"`
	CreatedAt        sql.NullTime `json:"created_at"`
	UpdatedAt        sql.NullTime `json:"updated_at"`
	DeletedAt        sql.NullTime `json:"deleted_at"`
	MerchantName     string       `json:"merchant_name"`
	TotalCount       int64        `json:"total_count"`
}

// GetMerchantPoliciesTrashed: Retrieves merchant policies for deleted merchants
// Parameters:
//
//	$1: search - Keyword to filter merchant_name (case-insensitive, partial match)
//	$2: limit - Pagination limit
//	$3: offset - Pagination offset
//
// Returns: Trashed merchant policy records with merchant name and total_count
func (q *Queries) GetMerchantPoliciesTrashed(ctx context.Context, arg GetMerchantPoliciesTrashedParams) ([]*GetMerchantPoliciesTrashedRow, error) {
	rows, err := q.db.QueryContext(ctx, getMerchantPoliciesTrashed, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetMerchantPoliciesTrashedRow
	for rows.Next() {
		var i GetMerchantPoliciesTrashedRow
		if err := rows.Scan(
			&i.MerchantPolicyID,
			&i.MerchantID,
			&i.PolicyType,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.MerchantName,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMerchantPolicy = `-- name: GetMerchantPolicy :one
SELECT merchant_policy_id, merchant_id, policy_type, title, description, created_at, updated_at, deleted_at
FROM merchant_policies
WHERE merchant_policy_id = $1
AND deleted_at IS NULL
`

// GetMerchantPolicy: Retrieves a single merchant policy that is not soft-deleted
// Parameters:
//
//	$1: merchant_policy_id - ID of the merchant policy
//
// Business Logic:
//   - Returns the merchant policy where deleted_at IS NULL
//
// Returns: A single merchant_policies record
func (q *Queries) GetMerchantPolicy(ctx context.Context, merchantPolicyID int32) (*MerchantPolicy, error) {
	row := q.db.QueryRowContext(ctx, getMerchantPolicy, merchantPolicyID)
	var i MerchantPolicy
	err := row.Scan(
		&i.MerchantPolicyID,
		&i.MerchantID,
		&i.PolicyType,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const restoreAllMerchantPolicies = `-- name: RestoreAllMerchantPolicies :exec
UPDATE merchant_policies
SET deleted_at = NULL
WHERE deleted_at IS NOT NULL
`

// RestoreAllMerchantPolicies: Restores all soft-deleted merchant policies
// Purpose: Bulk recovery operation
// Business Logic:
//   - Clears deleted_at on all trashed records
func (q *Queries) RestoreAllMerchantPolicies(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, restoreAllMerchantPolicies)
	return err
}

const restoreMerchantPolicy = `-- name: RestoreMerchantPolicy :one
UPDATE merchant_policies
SET deleted_at = NULL
WHERE merchant_policy_id = $1
  AND deleted_at IS NOT NULL
RETURNING merchant_policy_id, merchant_id, policy_type, title, description, created_at, updated_at, deleted_at
`

// RestoreMerchantPolicy: Restores a soft-deleted policy
// Purpose: Reactivate a previously deleted policy
// Parameters:
//
//	$1: merchant_policy_id
//
// Returns: The restored policy record
// Business Logic:
//   - Clears deleted_at
//   - Only works on previously soft-deleted entries
func (q *Queries) RestoreMerchantPolicy(ctx context.Context, merchantPolicyID int32) (*MerchantPolicy, error) {
	row := q.db.QueryRowContext(ctx, restoreMerchantPolicy, merchantPolicyID)
	var i MerchantPolicy
	err := row.Scan(
		&i.MerchantPolicyID,
		&i.MerchantID,
		&i.PolicyType,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const trashMerchantPolicy = `-- name: TrashMerchantPolicy :one
UPDATE merchant_policies
SET deleted_at = CURRENT_TIMESTAMP
WHERE merchant_policy_id = $1
  AND deleted_at IS NULL
RETURNING merchant_policy_id, merchant_id, policy_type, title, description, created_at, updated_at, deleted_at
`

// TrashMerchantPolicy: Soft-deletes a merchant policy
// Purpose: Temporarily deactivate a policy without permanent deletion
// Parameters:
//
//	$1: merchant_policy_id
//
// Returns: The soft-deleted policy record
// Business Logic:
//   - Sets deleted_at timestamp
//   - Only affects active records
func (q *Queries) TrashMerchantPolicy(ctx context.Context, merchantPolicyID int32) (*MerchantPolicy, error) {
	row := q.db.QueryRowContext(ctx, trashMerchantPolicy, merchantPolicyID)
	var i MerchantPolicy
	err := row.Scan(
		&i.MerchantPolicyID,
		&i.MerchantID,
		&i.PolicyType,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const updateMerchantPolicy = `-- name: UpdateMerchantPolicy :one
UPDATE merchant_policies
SET
    policy_type = $2,
    title = $3,
    description = $4,
    updated_at = CURRENT_TIMESTAMP
WHERE
    merchant_policy_id = $1
    AND deleted_at IS NULL
RETURNING merchant_policy_id, merchant_id, policy_type, title, description, created_at, updated_at, deleted_at
`

type UpdateMerchantPolicyParams struct {
	MerchantPolicyID int32  `json:"merchant_policy_id"`
	PolicyType       string `json:"policy_type"`
	Title            string `json:"title"`
	Description      string `json:"description"`
}

// UpdateMerchantPolicy: Updates an existing merchant policy
// Purpose: Modify policy details
// Parameters:
//
//	$1: merchant_policy_id
//	$2: policy_type
//	$3: title
//	$4: description
//
// Returns: The updated policy record
// Business Logic:
//   - Only affects active (non-deleted) records
//   - Automatically updates updated_at timestamps
func (q *Queries) UpdateMerchantPolicy(ctx context.Context, arg UpdateMerchantPolicyParams) (*MerchantPolicy, error) {
	row := q.db.QueryRowContext(ctx, updateMerchantPolicy,
		arg.MerchantPolicyID,
		arg.PolicyType,
		arg.Title,
		arg.Description,
	)
	var i MerchantPolicy
	err := row.Scan(
		&i.MerchantPolicyID,
		&i.MerchantID,
		&i.PolicyType,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}
