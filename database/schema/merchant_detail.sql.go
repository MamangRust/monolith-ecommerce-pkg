// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: merchant_detail.sql

package db

import (
	"context"
	"database/sql"
	"encoding/json"
)

const createMerchantDetail = `-- name: CreateMerchantDetail :one
INSERT INTO merchant_details (
    merchant_id,
    display_name,
    cover_image_url,
    logo_url,
    short_description,
    website_url
) VALUES (
    $1, $2, $3, $4, $5, $6
)
RETURNING merchant_detail_id, merchant_id, display_name, cover_image_url, logo_url, short_description, website_url, created_at, updated_at, deleted_at
`

type CreateMerchantDetailParams struct {
	MerchantID       int32          `json:"merchant_id"`
	DisplayName      sql.NullString `json:"display_name"`
	CoverImageUrl    sql.NullString `json:"cover_image_url"`
	LogoUrl          sql.NullString `json:"logo_url"`
	ShortDescription sql.NullString `json:"short_description"`
	WebsiteUrl       sql.NullString `json:"website_url"`
}

// CreateMerchantDetail: Inserts a new merchant detail record
// Purpose: Register profile details for a merchant
// Parameters:
//
//	$1: merchant_id
//	$2: display_name
//	$3: cover_image_url
//	$4: logo_url
//	$5: short_description
//	$6: website_url
//
// Returns: The newly created merchant detail record
func (q *Queries) CreateMerchantDetail(ctx context.Context, arg CreateMerchantDetailParams) (*MerchantDetail, error) {
	row := q.db.QueryRowContext(ctx, createMerchantDetail,
		arg.MerchantID,
		arg.DisplayName,
		arg.CoverImageUrl,
		arg.LogoUrl,
		arg.ShortDescription,
		arg.WebsiteUrl,
	)
	var i MerchantDetail
	err := row.Scan(
		&i.MerchantDetailID,
		&i.MerchantID,
		&i.DisplayName,
		&i.CoverImageUrl,
		&i.LogoUrl,
		&i.ShortDescription,
		&i.WebsiteUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const deleteAllPermanentMerchantDetails = `-- name: DeleteAllPermanentMerchantDetails :exec
DELETE FROM merchant_details
WHERE deleted_at IS NOT NULL
`

// DeleteAllPermanentMerchantDetails: Permanently delete all soft-deleted records
func (q *Queries) DeleteAllPermanentMerchantDetails(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllPermanentMerchantDetails)
	return err
}

const deleteMerchantDetailPermanently = `-- name: DeleteMerchantDetailPermanently :exec
DELETE FROM merchant_details
WHERE merchant_detail_id = $1
  AND deleted_at IS NOT NULL
`

// DeleteMerchantDetailPermanently: Hard delete a merchant detail
// Parameters:
//
//	$1: merchant_detail_id
func (q *Queries) DeleteMerchantDetailPermanently(ctx context.Context, merchantDetailID int32) error {
	_, err := q.db.ExecContext(ctx, deleteMerchantDetailPermanently, merchantDetailID)
	return err
}

const getMerchantDetail = `-- name: GetMerchantDetail :one
SELECT 
    md.merchant_detail_id, md.merchant_id, md.display_name, md.cover_image_url, md.logo_url, md.short_description, md.website_url, md.created_at, md.updated_at, md.deleted_at,
    m.name AS merchant_name,
    json_agg(
        json_build_object(
            'id', sml.merchant_social_id,
            'platform', sml.platform,
            'url', sml.url
        )
    ) AS social_media_links
FROM merchant_details md
JOIN merchants m ON md.merchant_id = m.merchant_id
LEFT JOIN merchant_social_media_links sml ON sml.merchant_detail_id = md.merchant_detail_id
WHERE md.merchant_detail_id = $1
  AND md.deleted_at IS NULL
GROUP BY md.merchant_detail_id, m.merchant_id
`

type GetMerchantDetailRow struct {
	MerchantDetailID int32           `json:"merchant_detail_id"`
	MerchantID       int32           `json:"merchant_id"`
	DisplayName      sql.NullString  `json:"display_name"`
	CoverImageUrl    sql.NullString  `json:"cover_image_url"`
	LogoUrl          sql.NullString  `json:"logo_url"`
	ShortDescription sql.NullString  `json:"short_description"`
	WebsiteUrl       sql.NullString  `json:"website_url"`
	CreatedAt        sql.NullTime    `json:"created_at"`
	UpdatedAt        sql.NullTime    `json:"updated_at"`
	DeletedAt        sql.NullTime    `json:"deleted_at"`
	MerchantName     string          `json:"merchant_name"`
	SocialMediaLinks json.RawMessage `json:"social_media_links"`
}

// GetMerchantDetail: Retrieves a single merchant detail that is not soft-deleted
// Parameters:
//
//	$1: merchant_detail_id - ID of the merchant detail
//
// Business Logic:
//   - Returns the merchant detail where deleted_at IS NULL
//
// Returns: A single merchant_details record with social media links
func (q *Queries) GetMerchantDetail(ctx context.Context, merchantDetailID int32) (*GetMerchantDetailRow, error) {
	row := q.db.QueryRowContext(ctx, getMerchantDetail, merchantDetailID)
	var i GetMerchantDetailRow
	err := row.Scan(
		&i.MerchantDetailID,
		&i.MerchantID,
		&i.DisplayName,
		&i.CoverImageUrl,
		&i.LogoUrl,
		&i.ShortDescription,
		&i.WebsiteUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.MerchantName,
		&i.SocialMediaLinks,
	)
	return &i, err
}

const getMerchantDetailTrashed = `-- name: GetMerchantDetailTrashed :one
SELECT merchant_detail_id, merchant_id, display_name, cover_image_url, logo_url, short_description, website_url, created_at, updated_at, deleted_at
FROM merchant_details
WHERE merchant_detail_id = $1
  AND deleted_at IS NOT NULL
`

// GetMerchantDetailTrashed: Fetches a single category by its ID
// Purpose: Retrieve details of an active (non-deleted) category
// Parameters:
//
//	$1: Category ID to search for
//
// Returns:
//
//	Full category record if found and not deleted
//
// Business Logic:
//   - Excludes soft-deleted categories
func (q *Queries) GetMerchantDetailTrashed(ctx context.Context, merchantDetailID int32) (*MerchantDetail, error) {
	row := q.db.QueryRowContext(ctx, getMerchantDetailTrashed, merchantDetailID)
	var i MerchantDetail
	err := row.Scan(
		&i.MerchantDetailID,
		&i.MerchantID,
		&i.DisplayName,
		&i.CoverImageUrl,
		&i.LogoUrl,
		&i.ShortDescription,
		&i.WebsiteUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const getMerchantDetails = `-- name: GetMerchantDetails :many
SELECT 
    md.merchant_detail_id, md.merchant_id, md.display_name, md.cover_image_url, md.logo_url, md.short_description, md.website_url, md.created_at, md.updated_at, md.deleted_at,
    m.name AS merchant_name,
    COUNT(*) OVER() AS total_count,
    json_agg(
        json_build_object(
            'id', sml.merchant_social_id,
            'platform', sml.platform,
            'url', sml.url
        )
    ) AS social_media_links
FROM merchant_details md
JOIN merchants m ON md.merchant_id = m.merchant_id
LEFT JOIN merchant_social_media_links sml ON sml.merchant_detail_id = md.merchant_detail_id
WHERE LOWER(m.name) LIKE LOWER(CONCAT('%', $1::text, '%'))
GROUP BY md.merchant_detail_id, m.merchant_id
LIMIT $2 OFFSET $3
`

type GetMerchantDetailsParams struct {
	Column1 string `json:"column_1"`
	Limit   int32  `json:"limit"`
	Offset  int32  `json:"offset"`
}

type GetMerchantDetailsRow struct {
	MerchantDetailID int32           `json:"merchant_detail_id"`
	MerchantID       int32           `json:"merchant_id"`
	DisplayName      sql.NullString  `json:"display_name"`
	CoverImageUrl    sql.NullString  `json:"cover_image_url"`
	LogoUrl          sql.NullString  `json:"logo_url"`
	ShortDescription sql.NullString  `json:"short_description"`
	WebsiteUrl       sql.NullString  `json:"website_url"`
	CreatedAt        sql.NullTime    `json:"created_at"`
	UpdatedAt        sql.NullTime    `json:"updated_at"`
	DeletedAt        sql.NullTime    `json:"deleted_at"`
	MerchantName     string          `json:"merchant_name"`
	TotalCount       int64           `json:"total_count"`
	SocialMediaLinks json.RawMessage `json:"social_media_links"`
}

// GetMerchantDetails: Retrieves all merchant details regardless of merchant status
// Parameters:
//
//	$1: search - Keyword to filter merchant name (case-insensitive, partial match)
//	$2: limit - Pagination limit
//	$3: offset - Pagination offset
//
// Returns: Merchant detail records matching the search, with total_count and social media links
func (q *Queries) GetMerchantDetails(ctx context.Context, arg GetMerchantDetailsParams) ([]*GetMerchantDetailsRow, error) {
	rows, err := q.db.QueryContext(ctx, getMerchantDetails, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetMerchantDetailsRow
	for rows.Next() {
		var i GetMerchantDetailsRow
		if err := rows.Scan(
			&i.MerchantDetailID,
			&i.MerchantID,
			&i.DisplayName,
			&i.CoverImageUrl,
			&i.LogoUrl,
			&i.ShortDescription,
			&i.WebsiteUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.MerchantName,
			&i.TotalCount,
			&i.SocialMediaLinks,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMerchantDetailsActive = `-- name: GetMerchantDetailsActive :many
SELECT 
    md.merchant_detail_id, md.merchant_id, md.display_name, md.cover_image_url, md.logo_url, md.short_description, md.website_url, md.created_at, md.updated_at, md.deleted_at,
    m.name AS merchant_name,
    COUNT(*) OVER() AS total_count,
    json_agg(
        json_build_object(
            'id', sml.merchant_social_id,
            'platform', sml.platform,
            'url', sml.url
        )
    ) AS social_media_links
FROM merchant_details md
JOIN merchants m ON md.merchant_id = m.merchant_id
LEFT JOIN merchant_social_media_links sml ON sml.merchant_detail_id = md.merchant_detail_id
WHERE m.deleted_at IS NULL
  AND LOWER(m.name) LIKE LOWER(CONCAT('%', $1::text, '%'))
GROUP BY md.merchant_detail_id, m.merchant_id
LIMIT $2 OFFSET $3
`

type GetMerchantDetailsActiveParams struct {
	Column1 string `json:"column_1"`
	Limit   int32  `json:"limit"`
	Offset  int32  `json:"offset"`
}

type GetMerchantDetailsActiveRow struct {
	MerchantDetailID int32           `json:"merchant_detail_id"`
	MerchantID       int32           `json:"merchant_id"`
	DisplayName      sql.NullString  `json:"display_name"`
	CoverImageUrl    sql.NullString  `json:"cover_image_url"`
	LogoUrl          sql.NullString  `json:"logo_url"`
	ShortDescription sql.NullString  `json:"short_description"`
	WebsiteUrl       sql.NullString  `json:"website_url"`
	CreatedAt        sql.NullTime    `json:"created_at"`
	UpdatedAt        sql.NullTime    `json:"updated_at"`
	DeletedAt        sql.NullTime    `json:"deleted_at"`
	MerchantName     string          `json:"merchant_name"`
	TotalCount       int64           `json:"total_count"`
	SocialMediaLinks json.RawMessage `json:"social_media_links"`
}

// GetMerchantDetailsActive: Retrieves merchant details for active merchants
// Parameters:
//
//	$1: search - Keyword to filter merchant name (case-insensitive, partial match)
//	$2: limit - Pagination limit
//	$3: offset - Pagination offset
//
// Returns: Active merchant detail records matching the search, with total_count and social media links
func (q *Queries) GetMerchantDetailsActive(ctx context.Context, arg GetMerchantDetailsActiveParams) ([]*GetMerchantDetailsActiveRow, error) {
	rows, err := q.db.QueryContext(ctx, getMerchantDetailsActive, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetMerchantDetailsActiveRow
	for rows.Next() {
		var i GetMerchantDetailsActiveRow
		if err := rows.Scan(
			&i.MerchantDetailID,
			&i.MerchantID,
			&i.DisplayName,
			&i.CoverImageUrl,
			&i.LogoUrl,
			&i.ShortDescription,
			&i.WebsiteUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.MerchantName,
			&i.TotalCount,
			&i.SocialMediaLinks,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMerchantDetailsTrashed = `-- name: GetMerchantDetailsTrashed :many
SELECT 
    md.merchant_detail_id, md.merchant_id, md.display_name, md.cover_image_url, md.logo_url, md.short_description, md.website_url, md.created_at, md.updated_at, md.deleted_at,
    m.name AS merchant_name,
    COUNT(*) OVER() AS total_count,
    json_agg(
        json_build_object(
            'id', sml.merchant_social_id,
            'platform', sml.platform,
            'url', sml.url
        )
    ) AS social_media_links
FROM merchant_details md
JOIN merchants m ON md.merchant_id = m.merchant_id
LEFT JOIN merchant_social_media_links sml ON sml.merchant_detail_id = md.merchant_detail_id
WHERE m.deleted_at IS NOT NULL
  AND LOWER(m.name) LIKE LOWER(CONCAT('%', $1::text, '%'))
GROUP BY md.merchant_detail_id, m.merchant_id
LIMIT $2 OFFSET $3
`

type GetMerchantDetailsTrashedParams struct {
	Column1 string `json:"column_1"`
	Limit   int32  `json:"limit"`
	Offset  int32  `json:"offset"`
}

type GetMerchantDetailsTrashedRow struct {
	MerchantDetailID int32           `json:"merchant_detail_id"`
	MerchantID       int32           `json:"merchant_id"`
	DisplayName      sql.NullString  `json:"display_name"`
	CoverImageUrl    sql.NullString  `json:"cover_image_url"`
	LogoUrl          sql.NullString  `json:"logo_url"`
	ShortDescription sql.NullString  `json:"short_description"`
	WebsiteUrl       sql.NullString  `json:"website_url"`
	CreatedAt        sql.NullTime    `json:"created_at"`
	UpdatedAt        sql.NullTime    `json:"updated_at"`
	DeletedAt        sql.NullTime    `json:"deleted_at"`
	MerchantName     string          `json:"merchant_name"`
	TotalCount       int64           `json:"total_count"`
	SocialMediaLinks json.RawMessage `json:"social_media_links"`
}

// GetMerchantDetailsTrashed: Retrieves merchant details for soft-deleted merchants
// Parameters:
//
//	$1: search - Keyword to filter merchant name (case-insensitive, partial match)
//	$2: limit - Pagination limit
//	$3: offset - Pagination offset
//
// Returns: Trashed merchant detail records matching the search, with total_count and social media links
func (q *Queries) GetMerchantDetailsTrashed(ctx context.Context, arg GetMerchantDetailsTrashedParams) ([]*GetMerchantDetailsTrashedRow, error) {
	rows, err := q.db.QueryContext(ctx, getMerchantDetailsTrashed, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetMerchantDetailsTrashedRow
	for rows.Next() {
		var i GetMerchantDetailsTrashedRow
		if err := rows.Scan(
			&i.MerchantDetailID,
			&i.MerchantID,
			&i.DisplayName,
			&i.CoverImageUrl,
			&i.LogoUrl,
			&i.ShortDescription,
			&i.WebsiteUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.MerchantName,
			&i.TotalCount,
			&i.SocialMediaLinks,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const restoreAllMerchantDetails = `-- name: RestoreAllMerchantDetails :exec
UPDATE merchant_details
SET deleted_at = NULL
WHERE deleted_at IS NOT NULL
`

// RestoreAllMerchantDetails: Restores all soft-deleted merchant details
func (q *Queries) RestoreAllMerchantDetails(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, restoreAllMerchantDetails)
	return err
}

const restoreMerchantDetail = `-- name: RestoreMerchantDetail :one
UPDATE merchant_details
SET deleted_at = NULL
WHERE merchant_detail_id = $1
  AND deleted_at IS NOT NULL
RETURNING merchant_detail_id, merchant_id, display_name, cover_image_url, logo_url, short_description, website_url, created_at, updated_at, deleted_at
`

// RestoreMerchantDetail: Restores a soft-deleted merchant detail
// Purpose: Reactivate previously hidden profile
// Parameters:
//
//	$1: merchant_detail_id
//
// Returns: The restored record
func (q *Queries) RestoreMerchantDetail(ctx context.Context, merchantDetailID int32) (*MerchantDetail, error) {
	row := q.db.QueryRowContext(ctx, restoreMerchantDetail, merchantDetailID)
	var i MerchantDetail
	err := row.Scan(
		&i.MerchantDetailID,
		&i.MerchantID,
		&i.DisplayName,
		&i.CoverImageUrl,
		&i.LogoUrl,
		&i.ShortDescription,
		&i.WebsiteUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const trashMerchantDetail = `-- name: TrashMerchantDetail :one
UPDATE merchant_details
SET deleted_at = CURRENT_TIMESTAMP
WHERE merchant_detail_id = $1
  AND deleted_at IS NULL
RETURNING merchant_detail_id, merchant_id, display_name, cover_image_url, logo_url, short_description, website_url, created_at, updated_at, deleted_at
`

// TrashMerchantDetail: Soft-deletes a merchant detail
// Purpose: Temporarily hide the merchant profile
// Parameters:
//
//	$1: merchant_detail_id
//
// Returns: The soft-deleted detail record
func (q *Queries) TrashMerchantDetail(ctx context.Context, merchantDetailID int32) (*MerchantDetail, error) {
	row := q.db.QueryRowContext(ctx, trashMerchantDetail, merchantDetailID)
	var i MerchantDetail
	err := row.Scan(
		&i.MerchantDetailID,
		&i.MerchantID,
		&i.DisplayName,
		&i.CoverImageUrl,
		&i.LogoUrl,
		&i.ShortDescription,
		&i.WebsiteUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const updateMerchantDetail = `-- name: UpdateMerchantDetail :one
UPDATE merchant_details
SET
    display_name = $2,
    cover_image_url = $3,
    logo_url = $4,
    short_description = $5,
    website_url = $6,
    updated_at = CURRENT_TIMESTAMP
WHERE
    merchant_detail_id = $1
    AND deleted_at IS NULL
RETURNING merchant_detail_id, merchant_id, display_name, cover_image_url, logo_url, short_description, website_url, created_at, updated_at, deleted_at
`

type UpdateMerchantDetailParams struct {
	MerchantDetailID int32          `json:"merchant_detail_id"`
	DisplayName      sql.NullString `json:"display_name"`
	CoverImageUrl    sql.NullString `json:"cover_image_url"`
	LogoUrl          sql.NullString `json:"logo_url"`
	ShortDescription sql.NullString `json:"short_description"`
	WebsiteUrl       sql.NullString `json:"website_url"`
}

// UpdateMerchantDetail: Updates an existing merchant detail record
// Purpose: Modify merchant profile
// Parameters:
//
//	$1: merchant_detail_id
//	$2: display_name
//	$3: cover_image_url
//	$4: logo_url
//	$5: short_description
//	$6: website_url
//
// Returns: The updated merchant detail
func (q *Queries) UpdateMerchantDetail(ctx context.Context, arg UpdateMerchantDetailParams) (*MerchantDetail, error) {
	row := q.db.QueryRowContext(ctx, updateMerchantDetail,
		arg.MerchantDetailID,
		arg.DisplayName,
		arg.CoverImageUrl,
		arg.LogoUrl,
		arg.ShortDescription,
		arg.WebsiteUrl,
	)
	var i MerchantDetail
	err := row.Scan(
		&i.MerchantDetailID,
		&i.MerchantID,
		&i.DisplayName,
		&i.CoverImageUrl,
		&i.LogoUrl,
		&i.ShortDescription,
		&i.WebsiteUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}
