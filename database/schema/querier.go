// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"context"
	"time"
)

type Querier interface {
	// AssignRoleToUser: Assigns a role to a user (creates a user-role relation)
	// Purpose: Role management for user access control
	// Parameters:
	//   $1: User ID
	//   $2: Role ID
	// Returns:
	//   user_role_id, user_id, role_id, timestamps (incl. deleted_at for future status check)
	// Business Logic:
	//   - Adds a new entry in the user_roles mapping table
	//   - Timestamps created_at and updated_at auto-set to current
	AssignRoleToUser(ctx context.Context, arg AssignRoleToUserParams) (*UserRole, error)
	// CalculateTotalPrice: Calculates total price of active order items for a specific order
	// Purpose: Provides the aggregated monetary value of an order
	// Parameters:
	//   $1: order_id - identifier of the order
	// Returns:
	//   total_price: Sum of (quantity * price) for all active items in the order
	// Business Logic:
	//   - Ignores soft-deleted items
	//   - Ensures result is zero if no items exist
	CalculateTotalPrice(ctx context.Context, orderID int32) (int32, error)
	// CreateBanner: Inserts a new banner
	// Parameters:
	//   $1: name
	//   $2: start_date
	//   $3: end_date
	//   $4: start_time
	//   $5: end_time
	//   $6: is_active
	// Returns: The newly created banner
	CreateBanner(ctx context.Context, arg CreateBannerParams) (*Banner, error)
	// CreateCart: Adds a new product to user's shopping cart
	// Purpose: Add items to cart during product browsing
	// Parameters:
	//   $1: user_id - ID of the user adding the item
	//   $2: product_id - ID of the product being added
	//   $3: name - Display name of the product
	//   $4: price - Current price of the product
	//   $5: image - URL of product image
	//   $6: quantity - Number of units being added
	//   $7: weight - Total weight of the item(s) for shipping
	// Returns:
	//   The complete created cart record
	// Business Logic:
	//   - Creates a new cart entry with all product details
	//   - Requires all product information for historical accuracy
	//   - Returns the full record for immediate UI update
	CreateCart(ctx context.Context, arg CreateCartParams) (*Cart, error)
	// CreateCategory: Inserts a new category into the system
	// Purpose: Adds a new product category for classification and reporting
	// Parameters:
	//   $1: Category name
	//   $2: Category description
	//   $3: Slug for category (URL-friendly identifier)
	// Returns:
	//   Full category record including generated ID
	// Business Logic:
	//   - Assumes unique slug for identification in URLs
	//   - Automatically populates timestamps via default DB behavior (if configured)
	CreateCategory(ctx context.Context, arg CreateCategoryParams) (*Category, error)
	// CreateMerchant: Creates a new merchant account
	// Purpose: Register a new merchant in the system
	// Parameters:
	//   $1: user_id - Associated user account ID
	//   $2: name - Business name
	//   $3: description - Business description
	//   $4: address - Physical address
	//   $5: contact_email - Business email
	//   $6: contact_phone - Business phone
	//   $7: status - Account status (active/inactive)
	// Returns: The created merchant record
	// Business Logic:
	//   - Sets created_at timestamp automatically
	//   - Requires all mandatory merchant fields
	//   - Status defaults to 'active' unless specified otherwise
	CreateMerchant(ctx context.Context, arg CreateMerchantParams) (*Merchant, error)
	// CreateMerchantBusinessInformation: Inserts a new business info record
	// Purpose: Register extended business info for a merchant
	// Parameters:
	//   $1: merchant_id
	//   $2: business_type
	//   $3: tax_id
	//   $4: established_year
	//   $5: number_of_employees
	//   $6: website_url
	// Returns: The newly created business info record
	// Business Logic:
	//   - Sets created_at timestamp automatically
	//   - Validates all required fields
	CreateMerchantBusinessInformation(ctx context.Context, arg CreateMerchantBusinessInformationParams) (*MerchantBusinessInformation, error)
	// CreateMerchantCertificationOrAward: Inserts a new certification or award
	// Purpose: Register a new certification or award for a merchant
	// Parameters:
	//   $1: merchant_id
	//   $2: title
	//   $3: description
	//   $4: issued_by
	//   $5: issue_date
	//   $6: expiry_date
	//   $7: certificate_url
	// Returns: The newly created certification record
	// Business Logic:
	//   - Sets created_at automatically
	//   - Requires merchant_id and title
	CreateMerchantCertificationOrAward(ctx context.Context, arg CreateMerchantCertificationOrAwardParams) (*MerchantCertificationsAndAward, error)
	// CreateMerchantDetail: Inserts a new merchant detail record
	// Purpose: Register profile details for a merchant
	// Parameters:
	//   $1: merchant_id
	//   $2: display_name
	//   $3: cover_image_url
	//   $4: logo_url
	//   $5: short_description
	//   $6: website_url
	// Returns: The newly created merchant detail record
	CreateMerchantDetail(ctx context.Context, arg CreateMerchantDetailParams) (*MerchantDetail, error)
	CreateMerchantDocument(ctx context.Context, arg CreateMerchantDocumentParams) (*MerchantDocument, error)
	// CreateMerchantPolicy: Inserts a new merchant policy
	// Purpose: Register a new policy for a merchant
	// Parameters:
	//   $1: merchant_id
	//   $2: policy_type
	//   $3: title
	//   $4: description
	// Returns: The newly created policy record
	// Business Logic:
	//   - Sets created_at, updated_at automatically
	CreateMerchantPolicy(ctx context.Context, arg CreateMerchantPolicyParams) (*MerchantPolicy, error)
	// CreateMerchantSocialMediaLink: Inserts a new merchant social media link
	// Purpose: Register a new social media link for a merchant
	// Parameters:
	//   $1: merchant_detail_id
	//   $2: platform
	//   $3: url
	// Returns: The newly created social media link
	// Business Logic:
	//   - Sets created_at, updated_at automatically
	CreateMerchantSocialMediaLink(ctx context.Context, arg CreateMerchantSocialMediaLinkParams) (*MerchantSocialMediaLink, error)
	// CreateOrder: Creates a new order record
	// Purpose: Register a new transaction in the system
	// Parameters:
	//   $1: merchant_id - UUID of the merchant associated with the order
	//   $2: user_id - ID of the user processing the order
	//   $3: total_price - Numeric total amount of the order
	// Returns: The complete created order record
	// Business Logic:
	//   - Automatically sets created_at timestamp
	//   - Requires merchant_id, user_id and total_price
	//   - Typically followed by order item creation
	CreateOrder(ctx context.Context, arg CreateOrderParams) (*Order, error)
	// CreateOrderItem: Inserts a new order item record
	// Purpose: Adds a product to a specific order
	// Parameters:
	//   $1: order_id
	//   $2: product_id
	//   $3: quantity
	//   $4: price
	// Returns:
	//   The newly created order item
	// Business Logic:
	//   - Assumes quantity and price are validated in application layer
	CreateOrderItem(ctx context.Context, arg CreateOrderItemParams) (*OrderItem, error)
	// CreateProduct: Creates a new product entry
	// Purpose: Add new products to merchant's catalog
	// Parameters:
	//   $1: merchant_id - ID of the merchant owning the product
	//   $2: category_id - Product category ID
	//   $3: name - Product display name
	//   $4: description - Detailed product description
	//   $5: price - Product selling price
	//   $6: count_in_stock - Available inventory quantity
	//   $7: brand - Product brand name
	//   $8: weight - Product weight in grams/kg
	//   $9: rating - Initial product rating (0-5)
	//   $10: slug_product - URL-friendly product identifier
	//   $11: image_product - Main product image URL
	// Returns:
	//   The complete created product record
	// Business Logic:
	//   - Creates a new active product
	//   - Requires all essential product information
	//   - Returns full record for immediate use
	CreateProduct(ctx context.Context, arg CreateProductParams) (*Product, error)
	// CreateRefreshToken: Creates a new refresh token
	// Purpose: Generate a refresh token for user authentication
	// Parameters:
	//   $1: user_id - ID of the user this token belongs to
	//   $2: token - The actual refresh token string
	//   $3: expiration - Expiration timestamp of the token
	// Returns: The created refresh token record (excluding sensitive fields if any)
	// Business Logic:
	//   - Sets both created_at and updated_at to current timestamp
	//   - Used in JWT refresh token rotation
	//   - Typically created during login/auth flows
	CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (*RefreshToken, error)
	CreateResetToken(ctx context.Context, arg CreateResetTokenParams) (*ResetToken, error)
	// CreateReview: Creates a new product review
	// Purpose: Allow users to submit product reviews
	// Parameters:
	//   $1: user_id - ID of the user submitting review
	//   $2: product_id - ID of the product being reviewed
	//   $3: name - Display name for the review
	//   $4: comment - Review text content
	//   $5: rating - Numeric rating (typically 1-5)
	// Returns:
	//   The complete created review record
	// Business Logic:
	//   - Creates a new active review
	//   - Requires user_id and product_id for reference
	//   - Returns full record for immediate display
	CreateReview(ctx context.Context, arg CreateReviewParams) (*Review, error)
	// CreateReviewDetail: Inserts a new review detail
	// Parameters:
	//   $1: review_id - Foreign key to reviews table
	//   $2: type - Either 'photo' or 'video'
	//   $3: url - URL of the media
	//   $4: caption - Optional caption
	// Returns: The inserted review detail record
	CreateReviewDetail(ctx context.Context, arg CreateReviewDetailParams) (*ReviewDetail, error)
	// CreateRole: Inserts a new role into the system
	// Purpose: Add new role definitions (e.g., Admin, Cashier, etc.)
	// Parameters:
	//   $1: Role name
	// Returns:
	//   Newly created role's full data (including timestamps)
	CreateRole(ctx context.Context, roleName string) (*Role, error)
	// CreateShippingAddress: Creates a new shipping address record
	// Membuat record alamat pengiriman baru
	// Parameters:
	//   $1: order_id - Associated order ID
	//   $2: alamat - Complete street address
	//   $3: provinsi - Province/state
	//   $4: negara - Country
	//   $5: kota - City
	//   $6: courier - Shipping courier name
	//   $7: shipping_method - Shipping service type
	//   $8: shipping_cost - Calculated shipping cost
	// Returns:
	//   The complete created shipping address record
	//   Seluruh record alamat pengiriman yang baru dibuat
	// Business Logic:
	//   - Stores all necessary shipping information for an order
	//   - Menyimpan semua informasi pengiriman yang diperlukan untuk pesanan
	CreateShippingAddress(ctx context.Context, arg CreateShippingAddressParams) (*ShippingAddress, error)
	// CreateSlider: Creates a new slider entry
	// Membuat slider baru
	// Parameters:
	//   $1: name - Nama/judul slider
	//   $2: image - URL gambar slider
	// Returns:
	//   The complete created slider record
	//   Seluruh record slider yang baru dibuat
	// Business Logic:
	//   - Creates a new active slider
	//   - Membuat slider aktif baru
	//   - Requires both name and image
	//   - Memerlukan nama dan gambar
	CreateSlider(ctx context.Context, arg CreateSliderParams) (*Slider, error)
	// CreateTransactions: Creates a new transaction record
	// Purpose: Record a payment transaction in the system
	// Parameters:
	//   $1: order_id - Reference to the associated order
	//   $2: merchant_id - ID of the merchant receiving payment
	//   $3: payment_method - Payment method used (e.g., 'cash', 'credit_card')
	//   $4: amount - Total amount of the transaction
	//   $5: change_amount - Amount of change given (for cash payments)
	//   $6: payment_status - Status of payment ('pending', 'success', 'failed')
	// Returns: The complete created transaction record
	// Business Logic:
	//   - Sets created_at timestamp automatically
	//   - Validates all required payment fields
	//   - Typically created during checkout process
	CreateTransaction(ctx context.Context, arg CreateTransactionParams) (*Transaction, error)
	// CreateUser: Creates a new user account
	// Purpose: Register a new user in the system
	// Parameters:
	//   $1: firstname - User's first name
	//   $2: lastname - User's last name
	//   $3: email - User's email address (must be unique)
	//   $4: password - Hashed password string
	// Returns: The complete created user record
	// Business Logic:
	//   - Sets created_at and updated_at timestamps automatically
	//   - Requires all mandatory user fields
	//   - Email must be unique across the system
	//   - Password should be pre-hashed before insertion
	CreateUser(ctx context.Context, arg CreateUserParams) (*User, error)
	// DeleteAllCartByUserId: Deletes multiple cart items for a specific user
	// Purpose: Delete selected cart items securely
	// Parameters:
	//   $1: cart_ids - Array of cart item IDs
	//   $2: user_id  - ID of the user
	// Returns:
	//   Nothing (exec-only)
	// Business Logic:
	//   - Ensures only the user’s own cart items are deleted
	DeleteAllCartByUserId(ctx context.Context, arg DeleteAllCartByUserIdParams) error
	// DeleteMerchantPolicyPermanently: Hard-deletes a policy record
	// Purpose: Permanently remove a soft-deleted policy
	// Parameters:
	//   $1: merchant_policy_id
	// Business Logic:
	//   - Irreversible delete
	//   - Only affects already soft-deleted records
	DeleteAllMerchantPolicyPermanently(ctx context.Context) error
	// DeleteAllMerchantSocialMediaLinksPermanently: Hard-deletes all soft-deleted social media links
	// Purpose: Permanently remove all trashed links
	// Business Logic:
	//   - Irreversible delete
	//   - Only affects already soft-deleted records
	DeleteAllMerchantSocialMediaLinksPermanently(ctx context.Context) error
	// DeleteAllPermanentBanners: Permanently delete all trashed banners
	DeleteAllPermanentBanners(ctx context.Context) error
	// DeleteAllPermanentCategories: Permanently deletes all trashed categories
	// Purpose: Bulk purge of all soft-deleted category records
	// Parameters: None
	// Returns: None
	// Business Logic:
	//   - Only affects records marked as deleted
	DeleteAllPermanentCategories(ctx context.Context) error
	// DeleteAllPermanentMerchantBusinessInformation: Hard-deletes all trashed records
	// Purpose: Clean up all soft-deleted business info entries
	// Business Logic:
	//   - Irreversible bulk delete
	//   - Used during database cleanup/maintenance
	DeleteAllPermanentMerchantBusinessInformation(ctx context.Context) error
	// DeleteAllPermanentMerchantCertificationsAndAwards: Hard-deletes all trashed certifications
	// Purpose: Bulk clean-up operation
	// Business Logic:
	//   - Irreversible delete for all soft-deleted records
	//   - Should be restricted to admin-level actions
	DeleteAllPermanentMerchantCertificationsAndAwards(ctx context.Context) error
	// DeleteAllPermanentMerchantDetails: Permanently delete all soft-deleted records
	DeleteAllPermanentMerchantDetails(ctx context.Context) error
	DeleteAllPermanentMerchantDocuments(ctx context.Context) error
	// DeleteAllPermanentMerchants: Purges all trashed merchants
	// Purpose: Clean up all soft-deleted merchant records
	// Business Logic:
	//   - Irreversible bulk deletion operation
	//   - Only affects already soft-deleted records
	//   - Typically used during database maintenance
	//   - Should be restricted to admin users
	DeleteAllPermanentMerchants(ctx context.Context) error
	// DeleteAllPermanentOrders: Purges all cancelled orders
	// Purpose: Clean up all soft-deleted order records
	// Business Logic:
	//   - Irreversible bulk deletion operation
	//   - Only affects already cancelled orders
	//   - Typically used during database maintenance
	//   - Should be restricted to admin users
	DeleteAllPermanentOrders(ctx context.Context) error
	// DeleteAllPermanentOrdersItem: Permanently deletes all trashed order items
	// Purpose: Performs hard delete of all soft-deleted items
	// Parameters: None
	// Returns: None
	// Business Logic:
	//   - Used for data cleanup or archival enforcement
	DeleteAllPermanentOrdersItem(ctx context.Context) error
	// DeleteAllPermanentProducts: Purges all trashed products
	// Purpose: Clean up recycle bin
	// Parameters: None
	// Returns:
	//   Nothing (exec-only)
	// Business Logic:
	//   - Permanent deletion of all trashed items
	//   - Admin-level operation
	//   - Irreversible bulk deletion
	DeleteAllPermanentProducts(ctx context.Context) error
	// DeleteAllPermanentReviewDetails: Permanently deletes all trashed review details
	// Parameters: None
	// Business Logic:
	//   - Deletes all records where deleted_at IS NOT NULL
	// Returns: No return value (exec command)
	DeleteAllPermanentReviewDetails(ctx context.Context) error
	// DeleteAllPermanentReviews: Purges all trashed reviews
	// Purpose: Clean up review recycle bin
	// Parameters: None
	// Returns:
	//   Nothing (exec-only)
	// Business Logic:
	//   - Permanent deletion of all trashed reviews
	//   - Admin-level operation
	//   - Irreversible bulk deletion
	DeleteAllPermanentReviews(ctx context.Context) error
	// DeleteAllPermanentRoles: Permanently deletes all soft-deleted roles
	// Purpose: Bulk cleanup of trashed roles
	// Parameters: None
	DeleteAllPermanentRoles(ctx context.Context) error
	// DeleteAllPermanentShippingAddress: Permanently removes all trashed addresses
	// Menghapus permanen semua alamat pengiriman yang di-trash
	// Parameters: None
	// Returns:
	//   Nothing (exec-only)
	// Business Logic:
	//   - Admin-level bulk deletion
	//   - Irreversible operation
	//   - Operasi penghapusan massal level admin
	//   - Tidak dapat dibatalkan
	DeleteAllPermanentShippingAddress(ctx context.Context) error
	// DeleteAllPermanentSliders: Permanently removes all trashed sliders
	// Menghapus permanen semua slider yang di-trash
	// Parameters: None
	// Returns:
	//   Nothing (exec-only)
	// Business Logic:
	//   - Admin-level bulk deletion
	//   - Operasi penghapusan massal level admin
	//   - Irreversible operation
	//   - Operasi tidak dapat dibatalkan
	DeleteAllPermanentSliders(ctx context.Context) error
	// DeleteAllPermanentTransactions: Purges all cancelled transactions
	// Purpose: Clean up all soft-deleted transaction records
	// Business Logic:
	//   - Irreversible bulk deletion operation
	//   - Only affects already cancelled transactions
	//   - Typically used during database maintenance
	//   - Should be restricted to admin users
	DeleteAllPermanentTransactions(ctx context.Context) error
	// DeleteAllPermanentUsers: Purges all trashed users
	// Purpose: Clean up all soft-deleted user records
	// Business Logic:
	//   - Irreversible bulk deletion operation
	//   - Only affects already soft-deleted users
	//   - Typically used during database maintenance
	//   - Should be restricted to admin users
	DeleteAllPermanentUsers(ctx context.Context) error
	// DeleteBannerPermanently: Permanently delete a single trashed banner
	// Parameters:
	//   $1: banner_id
	DeleteBannerPermanently(ctx context.Context, bannerID int32) error
	// DeleteCartByIdAndUserId: Deletes a cart item for a specific user
	// Purpose: Ensure only the owner can delete their cart item
	// Parameters:
	//   $1: cart_id - ID of the cart item to delete
	//   $2: user_id - ID of the user owning the cart
	// Returns:
	//   Nothing (exec-only)
	// Business Logic:
	//   - Prevents deletion of other users' cart items
	//   - Used during individual item removal
	DeleteCartByIdAndUserId(ctx context.Context, arg DeleteCartByIdAndUserIdParams) error
	// DeleteCategoryPermanently: Removes a soft-deleted category permanently
	// Purpose: Final cleanup of trashed categories
	// Parameters:
	//   $1: Category ID
	// Returns:
	//   Nothing (command only)
	// Business Logic:
	//   - Ensures category is deleted only if it has been soft-deleted
	DeleteCategoryPermanently(ctx context.Context, categoryID int32) error
	// DeleteMerchantBusinessInformationPermanently: Hard-deletes a single record
	// Purpose: Completely remove soft-deleted business info
	// Parameters:
	//   $1: merchant_business_info_id
	// Business Logic:
	//   - Irreversible operation
	//   - Only affects already soft-deleted records
	DeleteMerchantBusinessInformationPermanently(ctx context.Context, merchantBusinessInfoID int32) error
	// DeleteMerchantCertificationOrAwardPermanently: Hard-deletes a certification record
	// Purpose: Permanently remove a soft-deleted record
	// Parameters:
	//   $1: merchant_certification_id
	// Business Logic:
	//   - Only affects already soft-deleted records
	//   - Irreversible action
	DeleteMerchantCertificationOrAwardPermanently(ctx context.Context, merchantCertificationID int32) error
	// DeleteMerchantDetailPermanently: Hard delete a merchant detail
	// Parameters:
	//   $1: merchant_detail_id
	DeleteMerchantDetailPermanently(ctx context.Context, merchantDetailID int32) error
	DeleteMerchantDocumentPermanently(ctx context.Context, documentID int32) error
	// DeleteMerchantPermanently: Hard-deletes a merchant
	// Purpose: Completely remove merchant from database
	// Parameters:
	//   $1: merchant_id - ID of merchant to delete
	// Business Logic:
	//   - Permanent deletion of already soft-deleted records
	//   - No return value (exec-only operation)
	//   - Irreversible action - use with caution
	//   - Should trigger cleanup of related records
	DeleteMerchantPermanently(ctx context.Context, merchantID int32) error
	// DeleteMerchantPolicyPermanently: Hard-deletes a policy record
	// Purpose: Permanently remove a soft-deleted policy
	// Parameters:
	//   $1: merchant_policy_id
	// Business Logic:
	//   - Irreversible delete
	//   - Only affects already soft-deleted records
	DeleteMerchantPolicyPermanently(ctx context.Context, merchantPolicyID int32) error
	// DeleteMerchantSocialMediaLinkPermanently: Hard-deletes a social media link
	// Purpose: Permanently remove a link
	// Parameters:
	//   $1: merchant_social_id
	DeleteMerchantSocialMediaLinkPermanently(ctx context.Context, merchantSocialID int32) error
	// DeleteOrderItemPermanently: Permanently deletes a trashed order item
	// Purpose: Removes the record entirely from the database
	// Parameters:
	//   $1: order_item_id
	// Returns: None
	// Business Logic:
	//   - Only deletes if already soft-deleted
	//   - Irreversible action
	DeleteOrderItemPermanently(ctx context.Context, orderID int32) error
	// DeleteOrderPermanently: Hard-deletes an order
	// Purpose: Completely remove order from database
	// Parameters:
	//   $1: order_id - UUID of order to delete
	// Business Logic:
	//   - Permanent deletion of already cancelled orders
	//   - No return value (exec-only operation)
	//   - Irreversible action - use with caution
	//   - Should trigger deletion of related order_items
	DeleteOrderPermanently(ctx context.Context, orderID int32) error
	// DeletePermanentReviewDetail: Permanently deletes a soft-deleted review detail
	// Parameters:
	//   $1: review_detail_id - ID of the record to permanently delete
	// Business Logic:
	//   - Only deletes if deleted_at IS NOT NULL
	// Returns: No return value (exec command)
	DeletePermanentReviewDetail(ctx context.Context, reviewDetailID int32) error
	// DeletePermanentRole: Permanently deletes a trashed role
	// Purpose: Remove role from DB after soft delete
	// Parameters:
	//   $1: Role ID
	DeletePermanentRole(ctx context.Context, roleID int32) error
	// DeleteProductPermanently: Removes a product from database
	// Purpose: Permanent deletion of trashed products
	// Parameters:
	//   $1: product_id - ID of product to delete
	// Returns:
	//   Nothing (exec-only)
	// Business Logic:
	//   - Physical deletion of record
	//   - Only works on already-trashed products
	//   - Irreversible operation
	DeleteProductPermanently(ctx context.Context, productID int32) error
	// DeleteRefreshToken: Permanently deletes a refresh token
	// Purpose: Invalidate a specific refresh token
	// Parameters:
	//   $1: token - The token string to delete
	// Business Logic:
	//   - Hard deletes the token record
	//   - Used during logout/token invalidation
	//   - Prevents token reuse after deletion
	DeleteRefreshToken(ctx context.Context, token string) error
	// DeleteRefreshTokenByUserId: Permanently deletes all tokens for a user
	// Purpose: Invalidate all refresh tokens for a user
	// Parameters:
	//   $1: user_id - ID of the user whose tokens to delete
	// Business Logic:
	//   - Hard deletes all tokens for the user
	//   - Used during password reset or account lock
	//   - Ensures complete session invalidation
	DeleteRefreshTokenByUserId(ctx context.Context, userID int32) error
	DeleteResetToken(ctx context.Context, userID int64) error
	// DeleteReviewPermanently: Removes a review from database
	// Purpose: Permanent deletion of trashed reviews
	// Parameters:
	//   $1: review_id - ID of review to delete
	// Returns:
	//   Nothing (exec-only)
	// Business Logic:
	//   - Physical deletion of record
	//   - Only works on already-trashed reviews
	//   - Irreversible operation
	DeleteReviewPermanently(ctx context.Context, reviewID int32) error
	// DeleteShippingAddressPermanently: Permanently removes a trashed address
	// Menghapus permanen alamat pengiriman yang sudah di-trash
	// Parameters:
	//   $1: shipping_address_id - ID of address to delete
	// Returns:
	//   Nothing (exec-only)
	//   Tidak mengembalikan apa pun (exec-only)
	// Business Logic:
	//   - Only works on already trashed addresses
	//   - Irreversible deletion
	//   - Hanya bekerja pada alamat yang sudah di-trash
	//   - Penghapusan permanen tidak dapat dibatalkan
	DeleteShippingAddressPermanently(ctx context.Context, shippingAddressID int32) error
	// DeleteSliderPermanently: Permanently removes a trashed slider
	// Menghapus permanen slider yang sudah di-trash
	// Parameters:
	//   $1: slider_id - ID slider yang akan dihapus permanen
	// Returns:
	//   Nothing (exec-only)
	//   Tidak mengembalikan apa pun (exec-only)
	// Business Logic:
	//   - Physical deletion from database
	//   - Penghapusan fisik dari database
	//   - Only works on already trashed sliders
	//   - Hanya bekerja pada slider yang sudah di-trash
	//   - Irreversible operation
	//   - Operasi tidak dapat dibatalkan
	DeleteSliderPermanently(ctx context.Context, sliderID int32) error
	// DeleteTransactionPermanently: Hard-deletes a transaction
	// Purpose: Completely remove transaction from database
	// Parameters:
	//   $1: transaction_id - ID of transaction to delete
	// Business Logic:
	//   - Permanent deletion of already cancelled transactions
	//   - No return value (exec-only operation)
	//   - Irreversible action - use with caution
	//   - Should be restricted to admin users
	DeleteTransactionPermanently(ctx context.Context, transactionID int32) error
	// DeleteUserPermanently: Hard-deletes a user account
	// Purpose: Completely remove user from database
	// Parameters:
	//   $1: user_id - ID of user to delete
	// Business Logic:
	//   - Permanent deletion of already soft-deleted users
	//   - No return value (exec-only operation)
	//   - Irreversible action - use with caution
	//   - Should trigger cleanup of related records
	DeleteUserPermanently(ctx context.Context, userID int32) error
	// FindRefreshTokenByToken: Retrieves active refresh token by token string
	// Purpose: Validate and lookup refresh token
	// Parameters:
	//   $1: token - The refresh token string to find
	// Returns: The refresh token record if found and active
	// Business Logic:
	//   - Only returns non-deleted tokens
	//   - Used during token refresh operations
	//   - Helps prevent token reuse
	FindRefreshTokenByToken(ctx context.Context, token string) (*RefreshToken, error)
	// FindRefreshTokenByUserId: Retrieves latest active refresh token for user
	// Purpose: Get current valid refresh token for a user
	// Parameters:
	//   $1: user_id - ID of the user to find token for
	// Returns: The most recent refresh token for the user
	// Business Logic:
	//   - Returns only active (non-deleted) tokens
	//   - Orders by creation date (newest first)
	//   - Used for token management and validation
	//   - Limits to 1 result to get latest token
	FindRefreshTokenByUserId(ctx context.Context, userID int32) (*RefreshToken, error)
	GetActiveMerchantDocuments(ctx context.Context, arg GetActiveMerchantDocumentsParams) ([]*GetActiveMerchantDocumentsRow, error)
	// GetActiveRoles: Retrieves only active (non-deleted) roles with optional search and pagination
	// Purpose: Display roles that are currently usable in the system
	// Parameters:
	//   $1: Search query (nullable)
	//   $2: Limit
	//   $3: Offset
	// Returns:
	//   role_id, role_name, timestamps, and total_count
	GetActiveRoles(ctx context.Context, arg GetActiveRolesParams) ([]*GetActiveRolesRow, error)
	// GetBanner: Retrieves a single banner that is not soft-deleted
	// Parameters:
	//   $1: banner_id - ID of the banner
	// Business Logic:
	//   - Returns the banner where deleted_at IS NULL
	// Returns: A single banners record
	GetBanner(ctx context.Context, bannerID int32) (*Banner, error)
	// GetBanners: Retrieves all banners (active and trashed) with optional search and pagination
	// Parameters:
	//   $1: search - Keyword to filter banner name (case-insensitive, partial match)
	//   $2: limit - Pagination limit
	//   $3: offset - Pagination offset
	// Business Logic:
	//   - Returns all banners regardless of soft-delete status
	//   - Applies case-insensitive partial match on banner name
	//   - Supports pagination
	// Returns: List of all banners with total_count metadata
	GetBanners(ctx context.Context, arg GetBannersParams) ([]*GetBannersRow, error)
	// GetBannersActive: Retrieves active banners (not soft-deleted)
	// Parameters:
	//   $1: search - Keyword to filter banner name (case-insensitive, partial match)
	//   $2: limit - Pagination limit
	//   $3: offset - Pagination offset
	// Business Logic:
	//   - Returns banners where deleted_at IS NULL
	//   - Applies case-insensitive partial match on banner name
	//   - Supports pagination
	// Returns: List of active banners with total_count metadata
	GetBannersActive(ctx context.Context, arg GetBannersActiveParams) ([]*GetBannersActiveRow, error)
	// GetTrashedBanners: Retrieves soft-deleted (trashed) banners
	// Parameters:
	//   $1: search - Keyword to filter banner name (case-insensitive, partial match)
	//   $2: limit - Pagination limit
	//   $3: offset - Pagination offset
	// Business Logic:
	//   - Returns banners where deleted_at IS NOT NULL
	//   - Applies case-insensitive partial match on banner name
	//   - Supports pagination
	// Returns: List of trashed banners with total_count metadata
	GetBannersTrashed(ctx context.Context, arg GetBannersTrashedParams) ([]*GetBannersTrashedRow, error)
	// GetCarts: Retrieves paginated list of user's active cart items with search capability
	// Purpose: Display cart items for e-commerce checkout interface
	// Parameters:
	//   $1: user_id - ID of the user whose cart to retrieve
	//   $2: search_term - Optional text to filter items by name or price (NULL for no filter)
	//   $3: limit - Maximum number of records to return
	//   $4: offset - Number of records to skip for pagination
	// Returns:
	//   All cart fields plus total_count of matching records
	// Business Logic:
	//   - Excludes soft-deleted items (deleted_at IS NULL)
	//   - Filters by specific user only
	//   - Supports partial text matching on name and price fields (case-insensitive)
	//   - Returns newest items first (created_at DESC)
	//   - Provides total_count for pagination calculations
	GetCarts(ctx context.Context, arg GetCartsParams) ([]*GetCartsRow, error)
	// GetCategories: Retrieves paginated list of active categories with search capability
	// Purpose: List all active product categories for management UI
	// Parameters:
	//   $1: search_term - Optional text to filter categories by name or slug (NULL for no filter)
	//   $2: limit - Maximum number of records to return
	//   $3: offset - Number of records to skip for pagination
	// Returns:
	//   All category fields plus total_count of matching records
	// Business Logic:
	//   - Excludes soft-deleted categories (deleted_at IS NULL)
	//   - Supports partial text matching on name and slug_category fields (case-insensitive)
	//   - Returns newest categories first (created_at DESC)
	//   - Provides total_count for pagination calculations
	GetCategories(ctx context.Context, arg GetCategoriesParams) ([]*GetCategoriesRow, error)
	// GetCategoriesActive: Retrieves paginated list of active categories with search capability
	// Purpose: List all active product categories for management UI
	// Parameters:
	//   $1: search_term - Optional text to filter categories by name or slug (NULL for no filter)
	//   $2: limit - Maximum number of records to return
	//   $3: offset - Number of records to skip for pagination
	// Returns:
	//   All category fields plus total_count of matching records
	// Business Logic:
	//   - Excludes soft-deleted categories (deleted_at IS NULL)
	//   - Supports partial text matching on name and slug_category fields (case-insensitive)
	//   - Returns newest categories first (created_at DESC)
	//   - Provides total_count for pagination calculations
	GetCategoriesActive(ctx context.Context, arg GetCategoriesActiveParams) ([]*GetCategoriesActiveRow, error)
	// GetCategoriesTrashed: Retrieves paginated list of soft-deleted categories
	// Purpose: View/manage deleted categories for potential restoration
	// Parameters:
	//   $1: search_term - Optional filter text (NULL for all trashed categories)
	//   $2: limit - Pagination limit
	//   $3: offset - Pagination offset
	// Returns:
	//   Trashed category records with total_count
	// Business Logic:
	//   - Only returns soft-deleted records (deleted_at IS NOT NULL)
	//   - Same search functionality as active categories
	//   - Maintains consistent sorting with active records
	//   - Used in trash management/recovery interfaces
	GetCategoriesTrashed(ctx context.Context, arg GetCategoriesTrashedParams) ([]*GetCategoriesTrashedRow, error)
	// GetCategoryByID: Fetches a single category by its ID
	// Purpose: Retrieve details of an active (non-deleted) category
	// Parameters:
	//   $1: Category ID to search for
	// Returns:
	//   Full category record if found and not deleted
	// Business Logic:
	//   - Excludes soft-deleted categories
	GetCategoryByID(ctx context.Context, categoryID int32) (*Category, error)
	// GetCategoryByIDTrashed: Fetches a single category by its ID
	// Purpose: Retrieve details of an active (non-deleted) category
	// Parameters:
	//   $1: Category ID to search for
	// Returns:
	//   Full category record if found and not deleted
	// Business Logic:
	//   - Excludes soft-deleted categories
	GetCategoryByIDTrashed(ctx context.Context, categoryID int32) (*Category, error)
	// GetMerchantBusinessInformation: Retrieves a single business information record that is not soft-deleted
	// Parameters:
	//   $1: merchant_business_info_id - ID of the business info
	// Business Logic:
	//   - Returns the merchant business information where deleted_at IS NULL
	// Returns: A single merchant_business_information record
	GetMerchantBusinessInformation(ctx context.Context, merchantBusinessInfoID int32) (*MerchantBusinessInformation, error)
	// GetMerchantByID: Retrieves active merchant by ID
	// Purpose: Fetch merchant details for display/editing
	// Parameters:
	//   $1: merchant_id - ID of merchant to retrieve
	// Returns: Full merchant record if found and active
	// Business Logic:
	//   - Excludes soft-deleted records
	//   - Returns single record or nothing
	//   - Used for merchant profile viewing and editing
	GetMerchantByID(ctx context.Context, merchantID int32) (*Merchant, error)
	// GetMerchantCertificationOrAward: Retrieves a single merchant award or certification that is not soft-deleted
	// Parameters:
	//   $1: merchant_certification_id - ID of the award/certification
	// Business Logic:
	//   - Returns the merchant award or certification where deleted_at IS NULL
	// Returns: A single merchant_certifications_and_awards record
	GetMerchantCertificationOrAward(ctx context.Context, merchantCertificationID int32) (*MerchantCertificationsAndAward, error)
	// GetMerchantCertificationsAndAwards: Retrieves all certification records with pagination and optional search
	// Parameters:
	//   $1: search - Keyword to filter merchant_name (case-insensitive, partial match)
	//   $2: limit - Pagination limit
	//   $3: offset - Pagination offset
	// Business Logic:
	//   - Fetches certifications regardless of merchant status (active or deleted)
	//   - Supports case-insensitive partial search by merchant name
	//   - Applies pagination using limit and offset
	// Returns: Certification records matching the search, with total_count
	GetMerchantCertificationsAndAwards(ctx context.Context, arg GetMerchantCertificationsAndAwardsParams) ([]*GetMerchantCertificationsAndAwardsRow, error)
	// GetMerchantCertificationsAndAwardsActive: Retrieves certifications for active merchants with pagination and optional search
	// Parameters:
	//   $1: search - Keyword to filter merchant_name (case-insensitive, partial match)
	//   $2: limit - Pagination limit
	//   $3: offset - Pagination offset
	// Business Logic:
	//   - Fetches certifications only for active merchants (deleted_at IS NULL)
	//   - Supports case-insensitive partial search by merchant name
	//   - Applies pagination using limit and offset
	// Returns: Active merchant certification records matching the search, with total_count
	GetMerchantCertificationsAndAwardsActive(ctx context.Context, arg GetMerchantCertificationsAndAwardsActiveParams) ([]*GetMerchantCertificationsAndAwardsActiveRow, error)
	// GetMerchantCertificationsAndAwardsTrashed: Retrieves certifications for deleted merchants with pagination and optional search
	// Parameters:
	//   $1: search - Keyword to filter merchant_name (case-insensitive, partial match)
	//   $2: limit - Pagination limit
	//   $3: offset - Pagination offset
	// Business Logic:
	//   - Fetches certifications only for deleted merchants (deleted_at IS NOT NULL)
	//   - Supports case-insensitive partial search by merchant name
	//   - Applies pagination using limit and offset
	// Returns: Trashed merchant certification records matching the search, with total_count
	GetMerchantCertificationsAndAwardsTrashed(ctx context.Context, arg GetMerchantCertificationsAndAwardsTrashedParams) ([]*GetMerchantCertificationsAndAwardsTrashedRow, error)
	// GetMerchantDetail: Retrieves a single merchant detail that is not soft-deleted
	// Parameters:
	//   $1: merchant_detail_id - ID of the merchant detail
	// Business Logic:
	//   - Returns the merchant detail where deleted_at IS NULL
	// Returns: A single merchant_details record with social media links
	GetMerchantDetail(ctx context.Context, merchantDetailID int32) (*GetMerchantDetailRow, error)
	// GetMerchantDetailTrashed: Fetches a single category by its ID
	// Purpose: Retrieve details of an active (non-deleted) category
	// Parameters:
	//   $1: Category ID to search for
	// Returns:
	//   Full category record if found and not deleted
	// Business Logic:
	//   - Excludes soft-deleted categories
	GetMerchantDetailTrashed(ctx context.Context, merchantDetailID int32) (*MerchantDetail, error)
	// GetMerchantDetails: Retrieves all merchant details regardless of merchant status
	// Parameters:
	//   $1: search - Keyword to filter merchant name (case-insensitive, partial match)
	//   $2: limit - Pagination limit
	//   $3: offset - Pagination offset
	// Returns: Merchant detail records matching the search, with total_count and social media links
	GetMerchantDetails(ctx context.Context, arg GetMerchantDetailsParams) ([]*GetMerchantDetailsRow, error)
	// GetMerchantDetailsActive: Retrieves merchant details for active merchants
	// Parameters:
	//   $1: search - Keyword to filter merchant name (case-insensitive, partial match)
	//   $2: limit - Pagination limit
	//   $3: offset - Pagination offset
	// Returns: Active merchant detail records matching the search, with total_count and social media links
	GetMerchantDetailsActive(ctx context.Context, arg GetMerchantDetailsActiveParams) ([]*GetMerchantDetailsActiveRow, error)
	// GetMerchantDetailsTrashed: Retrieves merchant details for soft-deleted merchants
	// Parameters:
	//   $1: search - Keyword to filter merchant name (case-insensitive, partial match)
	//   $2: limit - Pagination limit
	//   $3: offset - Pagination offset
	// Returns: Trashed merchant detail records matching the search, with total_count and social media links
	GetMerchantDetailsTrashed(ctx context.Context, arg GetMerchantDetailsTrashedParams) ([]*GetMerchantDetailsTrashedRow, error)
	GetMerchantDocument(ctx context.Context, documentID int32) (*MerchantDocument, error)
	GetMerchantDocuments(ctx context.Context, arg GetMerchantDocumentsParams) ([]*GetMerchantDocumentsRow, error)
	// GetMerchantPolicies: Retrieves all merchant policies regardless of merchant status
	// Parameters:
	//   $1: search - Keyword to filter merchant_name (case-insensitive, partial match)
	//   $2: limit - Pagination limit
	//   $3: offset - Pagination offset
	// Returns: Merchant policy records with merchant name and total_count
	GetMerchantPolicies(ctx context.Context, arg GetMerchantPoliciesParams) ([]*GetMerchantPoliciesRow, error)
	// GetMerchantPoliciesActive: Retrieves merchant policies for active merchants
	// Parameters:
	//   $1: search - Keyword to filter merchant_name (case-insensitive, partial match)
	//   $2: limit - Pagination limit
	//   $3: offset - Pagination offset
	// Returns: Active merchant policy records with merchant name and total_count
	GetMerchantPoliciesActive(ctx context.Context, arg GetMerchantPoliciesActiveParams) ([]*GetMerchantPoliciesActiveRow, error)
	// GetMerchantPoliciesTrashed: Retrieves merchant policies for deleted merchants
	// Parameters:
	//   $1: search - Keyword to filter merchant_name (case-insensitive, partial match)
	//   $2: limit - Pagination limit
	//   $3: offset - Pagination offset
	// Returns: Trashed merchant policy records with merchant name and total_count
	GetMerchantPoliciesTrashed(ctx context.Context, arg GetMerchantPoliciesTrashedParams) ([]*GetMerchantPoliciesTrashedRow, error)
	// GetMerchantPolicy: Retrieves a single merchant policy that is not soft-deleted
	// Parameters:
	//   $1: merchant_policy_id - ID of the merchant policy
	// Business Logic:
	//   - Returns the merchant policy where deleted_at IS NULL
	// Returns: A single merchant_policies record
	GetMerchantPolicy(ctx context.Context, merchantPolicyID int32) (*MerchantPolicy, error)
	// GetMerchants: Retrieves paginated list of active merchants with search capability
	// Purpose: List all active merchants for management UI
	// Parameters:
	//   $1: search_term - Optional text to filter merchants by name or email (NULL for no filter)
	//   $2: limit - Maximum number of records to return (pagination limit)
	//   $3: offset - Number of records to skip (pagination offset)
	// Returns:
	//   All merchant fields plus total_count of matching records
	// Business Logic:
	//   - Excludes soft-deleted merchants (deleted_at IS NULL)
	//   - Supports partial text matching on name and contact_email fields (case-insensitive ILIKE)
	//   - Returns newest merchants first (created_at DESC)
	//   - Provides total_count for client-side pagination calculations
	//   - Uses window function COUNT(*) OVER() for efficient total count
	GetMerchants(ctx context.Context, arg GetMerchantsParams) ([]*GetMerchantsRow, error)
	// GetMerchantsActive: Retrieves paginated list of active merchants (identical to GetMerchants)
	// Purpose: Maintains consistent API pattern with other active/trashed endpoints
	// Parameters:
	//   $1: search_term - Optional filter text for name/email
	//   $2: limit - Pagination limit
	//   $3: offset - Pagination offset
	// Returns:
	//   Active merchant records with total_count
	// Business Logic:
	//   - Same functionality as GetMerchants
	//   - Exists for consistency in API design patterns
	// Note: Could be consolidated with GetMerchants if duplicate functionality is undesired
	GetMerchantsActive(ctx context.Context, arg GetMerchantsActiveParams) ([]*GetMerchantsActiveRow, error)
	// GetMerchantsBusinessInformation: Retrieves all business info records with pagination and optional search
	// Parameters:
	//   $1: search - Keyword to filter merchant_name (case-insensitive, partial match)
	//   $2: limit - Pagination limit
	//   $3: offset - Pagination offset
	// Business Logic:
	//   - Fetches all merchant business information regardless of merchant status (active or deleted)
	//   - Supports case-insensitive partial search by merchant name
	//   - Applies pagination using limit and offset
	// Returns: All business info records matching the search, with total_count for pagination
	GetMerchantsBusinessInformation(ctx context.Context, arg GetMerchantsBusinessInformationParams) ([]*GetMerchantsBusinessInformationRow, error)
	// GetMerchantsBusinessInformationActive: Retrieves business info for active (non-deleted) merchants with pagination and optional search
	// Parameters:
	//   $1: search - Keyword to filter merchant_name (case-insensitive, partial match)
	//   $2: limit - Pagination limit
	//   $3: offset - Pagination offset
	// Business Logic:
	//   - Fetches merchant business information for only active merchants (deleted_at IS NULL)
	//   - Supports case-insensitive partial search by merchant name
	//   - Applies pagination using limit and offset
	// Returns: Business info records for active merchants matching the search, with total_count
	GetMerchantsBusinessInformationActive(ctx context.Context, arg GetMerchantsBusinessInformationActiveParams) ([]*GetMerchantsBusinessInformationActiveRow, error)
	// GetMerchantBusinessInformationTrashed: Retrieves business info for deleted merchants with pagination and optional search
	// Parameters:
	//   $1: search - Keyword to filter merchant_name (case-insensitive, partial match)
	//   $2: limit - Pagination limit
	//   $3: offset - Pagination offset
	// Business Logic:
	//   - Fetches merchant business information for only deleted merchants (deleted_at IS NOT NULL)
	//   - Supports case-insensitive partial search by merchant name
	//   - Applies pagination using limit and offset
	// Returns: Business info records for deleted merchants matching the search, with total_count
	GetMerchantsBusinessInformationTrashed(ctx context.Context, arg GetMerchantsBusinessInformationTrashedParams) ([]*GetMerchantsBusinessInformationTrashedRow, error)
	// GetMerchantsTrashed: Retrieves paginated list of soft-deleted merchants
	// Purpose: View and manage deleted merchants for potential restoration
	// Parameters:
	//   $1: search_term - Optional text to filter trashed merchants
	//   $2: limit - Maximum records per page
	//   $3: offset - Records to skip
	// Returns:
	//   Trashed merchant records with total_count
	// Business Logic:
	//   - Only returns soft-deleted records (deleted_at IS NOT NULL)
	//   - Maintains same search functionality as active merchant queries
	//   - Preserves chronological sorting (newest first)
	//   - Used in merchant recovery/audit interfaces
	//   - Includes total_count for pagination in trash management UI
	GetMerchantsTrashed(ctx context.Context, arg GetMerchantsTrashedParams) ([]*GetMerchantsTrashedRow, error)
	// GetMonthlyAmountTransactionFailed: Retrieves monthly failed transaction metrics
	// Purpose: Generate monthly reports of failed transactions for analysis
	// Parameters:
	//   $1: Start date of first comparison period (timestamp)
	//   $2: End date of first comparison period (timestamp)
	//   $3: Start date of second comparison period (timestamp)
	//   $4: End date of second comparison period (timestamp)
	// Returns:
	//   year: Year as text
	//   month: 3-letter month abbreviation (e.g. 'Jan')
	//   total_failed: Count of failed transactions
	//   total_amount: Sum of failed transaction amounts
	// Business Logic:
	//   - Only includes failed (payment_status = 'failed') transactions
	//   - Excludes deleted transactions
	//   - Compares two customizable time periods
	//   - Includes gap-filling for months with no failed transactions
	//   - Returns 0 values for months with no failed transactions
	//   - Orders by most recent year/month first
	GetMonthlyAmountTransactionFailed(ctx context.Context, arg GetMonthlyAmountTransactionFailedParams) ([]*GetMonthlyAmountTransactionFailedRow, error)
	// GetMonthlyAmountTransactionFailedByMerchant: Retrieves monthly failed transaction metrics
	// Purpose: Generate monthly reports of failed transactions for analysis by merchant_id
	// Parameters:
	//   $1: Start date of first comparison period (timestamp)
	//   $2: End date of first comparison period (timestamp)
	//   $3: Start date of second comparison period (timestamp)
	//   $4: End date of second comparison period (timestamp)
	//   $5: Merchant ID
	// Returns:
	//   year: Year as text
	//   month: 3-letter month abbreviation (e.g. 'Jan')
	//   total_failed: Count of failed transactions
	//   total_amount: Sum of failed transaction amounts
	// Business Logic:
	//   - Only includes failed (payment_status = 'failed') transactions
	//   - Excludes deleted transactions
	//   - Compares two customizable time periods
	//   - Includes gap-filling for months with no failed transactions
	//   - Returns 0 values for months with no failed transactions
	//   - Orders by most recent year/month first
	GetMonthlyAmountTransactionFailedByMerchant(ctx context.Context, arg GetMonthlyAmountTransactionFailedByMerchantParams) ([]*GetMonthlyAmountTransactionFailedByMerchantRow, error)
	// GetMonthlyAmountTransactionSuccess: Retrieves monthly success transaction metrics
	// Purpose: Generate monthly reports of successful transactions for analysis
	// Parameters:
	//   $1: Start date of first comparison period (timestamp)
	//   $2: End date of first comparison period (timestamp)
	//   $3: Start date of second comparison period (timestamp)
	//   $4: End date of second comparison period (timestamp)
	// Returns:
	//   year: Year as text
	//   month: 3-letter month abbreviation (e.g. 'Jan')
	//   total_success: Count of successful transactions
	//   total_amount: Sum of successful transaction amounts
	// Business Logic:
	//   - Only includes successful (payment_status = 'success') transactions
	//   - Excludes deleted transactions
	//   - Compares two customizable time periods
	//   - Includes gap-filling for months with no transactions
	//   - Returns 0 values for months with no successful transactions
	//   - Orders by most recent year/month first
	GetMonthlyAmountTransactionSuccess(ctx context.Context, arg GetMonthlyAmountTransactionSuccessParams) ([]*GetMonthlyAmountTransactionSuccessRow, error)
	// GetMonthlyAmountTransactionSuccessByMerchant: Retrieves monthly success transaction metrics by merchant_id
	// Purpose: Generate monthly reports of successful transactions for analysis
	// Parameters:
	//   $1: Start date of first comparison period (timestamp)
	//   $2: End date of first comparison period (timestamp)
	//   $3: Start date of second comparison period (timestamp)
	//   $4: End date of second comparison period (timestamp)
	//   $5: Merchant ID
	// Returns:
	//   year: Year as text
	//   month: 3-letter month abbreviation (e.g. 'Jan')
	//   total_success: Count of successful transactions
	//   total_amount: Sum of successful transaction amounts
	// Business Logic:
	//   - Only includes successful (payment_status = 'success') transactions
	//   - Excludes deleted transactions
	//   - Compares two customizable time periods
	//   - Includes gap-filling for months with no transactions
	//   - Returns 0 values for months with no successful transactions
	//   - Orders by most recent year/month first
	GetMonthlyAmountTransactionSuccessByMerchant(ctx context.Context, arg GetMonthlyAmountTransactionSuccessByMerchantParams) ([]*GetMonthlyAmountTransactionSuccessByMerchantRow, error)
	// GetMonthlyCategory: Retrieves monthly sales activity for all categories within a 1-year period
	// Purpose: Provides category performance metrics by month for operational analysis
	// Parameters:
	//   $1: Reference date (timestamp) - determines the 12-month analysis period
	// Returns:
	//   category_id: Unique identifier for the category
	//   category_name: Display name of the category
	//   month: 3-letter month abbreviation (e.g. 'Jan')
	//   order_count: Number of orders associated with the category
	//   items_sold: Total quantity of items sold from the category
	//   total_revenue: Total revenue generated from category items
	// Business Logic:
	//   - Analyzes a rolling 12-month period from the reference date
	//   - Excludes deleted orders, items, products, and categories to ensure valid data
	//   - Aggregates by category and month for trend tracking
	//   - Uses abbreviated month names for compact visual reporting
	//   - Results sorted by month and revenue for time-series analysis
	GetMonthlyCategory(ctx context.Context, dollar_1 time.Time) ([]*GetMonthlyCategoryRow, error)
	// GetMonthlyCategoryById: Retrieves monthly sales activity for all categories within a 1-year period by category_id
	// Purpose: Provides category performance metrics by month for operational analysis
	// Parameters:
	//   $1: Reference date (timestamp) - determines the 12-month analysis period
	//   $2: Category ID
	// Returns:
	//   category_id: Unique identifier for the category
	//   category_name: Display name of the category
	//   month: 3-letter month abbreviation (e.g. 'Jan')
	//   order_count: Number of orders associated with the category
	//   items_sold: Total quantity of items sold from the category
	//   total_revenue: Total revenue generated from category items
	// Business Logic:
	//   - Analyzes a rolling 12-month period from the reference date
	//   - Excludes deleted orders, items, products, and categories to ensure valid data
	//   - Aggregates by category and month for trend tracking
	//   - Uses abbreviated month names for compact visual reporting
	//   - Results sorted by month and revenue for time-series analysis
	GetMonthlyCategoryById(ctx context.Context, arg GetMonthlyCategoryByIdParams) ([]*GetMonthlyCategoryByIdRow, error)
	// GetMonthlyCategoryByMerchant: Retrieves monthly sales activity for all categories within a 1-year period by merchant_id
	// Purpose: Provides category performance metrics by month for operational analysis
	// Parameters:
	//   $1: Reference date (timestamp) - determines the 12-month analysis period
	//   $2: Merchant ID
	// Returns:
	//   category_id: Unique identifier for the category
	//   category_name: Display name of the category
	//   month: 3-letter month abbreviation (e.g. 'Jan')
	//   order_count: Number of orders associated with the category
	//   items_sold: Total quantity of items sold from the category
	//   total_revenue: Total revenue generated from category items
	// Business Logic:
	//   - Analyzes a rolling 12-month period from the reference date
	//   - Excludes deleted orders, items, products, and categories to ensure valid data
	//   - Aggregates by category and month for trend tracking
	//   - Uses abbreviated month names for compact visual reporting
	//   - Results sorted by month and revenue for time-series analysis
	GetMonthlyCategoryByMerchant(ctx context.Context, arg GetMonthlyCategoryByMerchantParams) ([]*GetMonthlyCategoryByMerchantRow, error)
	// GetMonthlyOrder: Retrieves monthly order summary within a 1-year period
	// Purpose: Provides monthly sales performance metrics for trend and operational analysis
	// Parameters:
	//   $1: Reference date (timestamp) - determines the 12-month analysis window
	// Returns:
	//   month: 3-letter abbreviation of the month (e.g., 'Jan')
	//   order_count: Total number of orders in the month
	//   total_revenue: Sum of total price from all orders
	//   total_items_sold: Total quantity of items sold in that month
	// Business Logic:
	//   - Analyzes a 12-month period starting from the month of the reference date
	//   - Ignores soft-deleted records for accurate reporting
	//   - Aggregates data by month for visualizations and monthly performance tracking
	//   - Uses short month format for dashboard/chart compactness
	//   - Sorts chronologically by month
	GetMonthlyOrder(ctx context.Context, dollar_1 time.Time) ([]*GetMonthlyOrderRow, error)
	// GetMonthlyOrderByMerchant: Retrieves monthly order summary within a 1-year period by merchant_id
	// Purpose: Provides monthly sales performance metrics for trend and operational analysis
	// Parameters:
	//   $1: Reference date (timestamp) - determines the 12-month analysis window
	//   $2: Merchant ID
	// Returns:
	//   month: 3-letter abbreviation of the month (e.g., 'Jan')
	//   order_count: Total number of orders in the month
	//   total_revenue: Sum of total price from all orders
	//   total_items_sold: Total quantity of items sold in that month
	// Business Logic:
	//   - Analyzes a 12-month period starting from the month of the reference date
	//   - Ignores soft-deleted records for accurate reporting
	//   - Aggregates data by month for visualizations and monthly performance tracking
	//   - Uses short month format for dashboard/chart compactness
	//   - Sorts chronologically by month
	GetMonthlyOrderByMerchant(ctx context.Context, arg GetMonthlyOrderByMerchantParams) ([]*GetMonthlyOrderByMerchantRow, error)
	// GetMonthlyTotalPrice: Retrieves monthly revenue totals across two comparison periods
	// Purpose: Provides month-over-month revenue analytics for financial reporting
	// Parameters:
	//   $1: Start date of first comparison period
	//   $2: End date of first comparison period
	//   $3: Start date of second comparison period
	//   $4: End date of second comparison period
	// Returns:
	//   year: Year of revenue data (text format)
	//   month_name: Full month name (e.g. "January")
	//   total_revenue: Sum of order totals for that month (0 if no sales)
	// Business Logic:
	//   - Compares revenue between two customizable date ranges
	//   - Joins with order_items to ensure accurate order calculations
	//   - Excludes deleted orders and order items for data integrity
	//   - Uses gap-filling to show all months in both periods
	//   - Formats output for financial dashboards
	GetMonthlyTotalPrice(ctx context.Context, arg GetMonthlyTotalPriceParams) ([]*GetMonthlyTotalPriceRow, error)
	// GetMonthlyTotalPriceById: Retrieves monthly revenue totals across two comparison periods by category_id
	// Purpose: Provides month-over-month revenue analytics for financial reporting
	// Parameters:
	//   $1: Start date of first comparison period
	//   $2: End date of first comparison period
	//   $3: Start date of second comparison period
	//   $4: End date of second comparison period
	//   $5: Category ID
	// Returns:
	//   year: Year of revenue data (text format)
	//   month_name: Full month name (e.g. "January")
	//   total_revenue: Sum of order totals for that month (0 if no sales)
	// Business Logic:
	//   - Compares revenue between two customizable date ranges
	//   - Joins with order_items to ensure accurate order calculations
	//   - Excludes deleted orders and order items for data integrity
	//   - Uses gap-filling to show all months in both periods
	//   - Formats output for financial dashboards
	GetMonthlyTotalPriceById(ctx context.Context, arg GetMonthlyTotalPriceByIdParams) ([]*GetMonthlyTotalPriceByIdRow, error)
	// GetMonthlyTotalPriceByMerchant: Retrieves monthly revenue totals across two comparison periods by merchant_id
	// Purpose: Provides month-over-month revenue analytics for financial reporting
	// Parameters:
	//   $1: Start date of first comparison period
	//   $2: End date of first comparison period
	//   $3: Start date of second comparison period
	//   $4: End date of second comparison period
	//   $5: Merchant ID
	// Returns:
	//   year: Year of revenue data (text format)
	//   month_name: Full month name (e.g. "January")
	//   total_revenue: Sum of order totals for that month (0 if no sales)
	// Business Logic:
	//   - Compares revenue between two customizable date ranges
	//   - Joins with order_items to ensure accurate order calculations
	//   - Excludes deleted orders and order items for data integrity
	//   - Uses gap-filling to show all months in both periods
	//   - Formats output for financial dashboards
	GetMonthlyTotalPriceByMerchant(ctx context.Context, arg GetMonthlyTotalPriceByMerchantParams) ([]*GetMonthlyTotalPriceByMerchantRow, error)
	// GetMonthlyTotalRevenue: Retrieves monthly total revenue across two custom date ranges
	// Purpose: Compare total revenue between two time periods (e.g., current month vs previous month)
	// Parameters:
	//   $1: Start date of first period
	//   $2: End date of first period
	//   $3: Start date of second period
	//   $4: End date of second period
	// Returns:
	//   year: The year of the revenue data
	//   month: The full month name (e.g., "January")
	//   total_revenue: Total revenue (SUM of order totals) for that month (0 if no revenue)
	// Business Logic:
	//   - Compares revenue between two customizable time periods
	//   - Ensures all selected months appear even if no revenue (gap filling)
	//   - Includes only non-deleted orders and order items
	//   - Output formatted for charting or reporting tools
	GetMonthlyTotalRevenue(ctx context.Context, arg GetMonthlyTotalRevenueParams) ([]*GetMonthlyTotalRevenueRow, error)
	// GetMonthlyTotalRevenueById: Retrieves monthly total revenue across two custom date ranges by order_id
	// Purpose: Compare total revenue between two time periods (e.g., current month vs previous month)
	// Parameters:
	//   $1: Start date of first period
	//   $2: End date of first period
	//   $3: Start date of second period
	//   $4: End date of second period
	//   $5: Order ID
	// Returns:
	//   year: The year of the revenue data
	//   month: The full month name (e.g., "January")
	//   total_revenue: Total revenue (SUM of order totals) for that month (0 if no revenue)
	// Business Logic:
	//   - Compares revenue between two customizable time periods
	//   - Ensures all selected months appear even if no revenue (gap filling)
	//   - Includes only non-deleted orders and order items
	//   - Output formatted for charting or reporting tools
	GetMonthlyTotalRevenueById(ctx context.Context, arg GetMonthlyTotalRevenueByIdParams) ([]*GetMonthlyTotalRevenueByIdRow, error)
	// GetMonthlyTotalRevenueByMerchant: Retrieves monthly total revenue across two custom date ranges by merchant_id
	// Purpose: Compare total revenue between two time periods (e.g., current month vs previous month)
	// Parameters:
	//   $1: Start date of first period
	//   $2: End date of first period
	//   $3: Start date of second period
	//   $4: End date of second period
	//   $5: Order ID
	// Returns:
	//   year: The year of the revenue data
	//   month: The full month name (e.g., "January")
	//   total_revenue: Total revenue (SUM of order totals) for that month (0 if no revenue)
	// Business Logic:
	//   - Compares revenue between two customizable time periods
	//   - Ensures all selected months appear even if no revenue (gap filling)
	//   - Includes only non-deleted orders and order items
	//   - Output formatted for charting or reporting tools
	GetMonthlyTotalRevenueByMerchant(ctx context.Context, arg GetMonthlyTotalRevenueByMerchantParams) ([]*GetMonthlyTotalRevenueByMerchantRow, error)
	// GetMonthlyTransactionMethodsByMerchantFailed: Analyzes failed transactions by merchant and payment method monthly
	// Parameters:
	//   $1: Reference date (timestamp) - determines the 12-month analysis period
	// Returns:
	//   month: 3-letter month abbreviation (e.g. 'Jan')
	//   merchant_id: The merchant identifier
	//   merchant_name: The merchant's name
	//   payment_method: The payment method used
	//   total_transactions: Count of failed transactions
	//   total_amount: Total amount that failed processing
	GetMonthlyTransactionMethodsByMerchantFailed(ctx context.Context, arg GetMonthlyTransactionMethodsByMerchantFailedParams) ([]*GetMonthlyTransactionMethodsByMerchantFailedRow, error)
	// GetMonthlyTransactionMethodsByMerchantSuccess: Analyzes successful transactions by merchant and payment method monthly
	// Parameters:
	//   $1: Reference date (timestamp) - determines the 12-month analysis period
	// Returns:
	//   month: 3-letter month abbreviation (e.g. 'Jan')
	//   merchant_id: The merchant identifier
	//   merchant_name: The merchant's name
	//   payment_method: The payment method used
	//   total_transactions: Count of successful transactions
	//   total_amount: Total amount processed by this method
	GetMonthlyTransactionMethodsByMerchantSuccess(ctx context.Context, arg GetMonthlyTransactionMethodsByMerchantSuccessParams) ([]*GetMonthlyTransactionMethodsByMerchantSuccessRow, error)
	// GetMonthlyTransactionMethodsFailed: Analyzes failed payment method usage by month
	// Parameters:
	//   $1: Reference date (timestamp) - determines the 12-month analysis period
	// Returns:
	//   month: 3-letter month abbreviation (e.g. 'Jan')
	//   payment_method: The payment method used
	//   total_transactions: Count of failed transactions
	//   total_amount: Total amount that failed processing
	GetMonthlyTransactionMethodsFailed(ctx context.Context, arg GetMonthlyTransactionMethodsFailedParams) ([]*GetMonthlyTransactionMethodsFailedRow, error)
	// GetMonthlyTransactionMethodsSuccess: Analyzes successful payment method usage by month
	// Parameters:
	//   $1: Reference date (timestamp) - determines the 12-month analysis period
	// Returns:
	//   month: 3-letter month abbreviation (e.g. 'Jan')
	//   payment_method: The payment method used
	//   total_transactions: Count of successful transactions
	//   total_amount: Total amount processed by this method
	GetMonthlyTransactionMethodsSuccess(ctx context.Context, arg GetMonthlyTransactionMethodsSuccessParams) ([]*GetMonthlyTransactionMethodsSuccessRow, error)
	// GetOrderByID: Retrieves an active order by ID
	// Purpose: Fetch order details for display/processing
	// Parameters:
	//   $1: order_id - UUID of the order to retrieve
	// Returns: Full order record if found and active
	// Business Logic:
	//   - Excludes soft-deleted orders
	//   - Used for order viewing, receipts, and processing
	//   - Typically joined with order_items in application
	GetOrderByID(ctx context.Context, orderID int32) (*Order, error)
	// GetOrderItems: Retrieves active order items with pagination and search
	// Purpose: Provides paginated listing of non-deleted order items for display or reporting
	// Parameters:
	//   $1: Search keyword (matches order_id or product_id, optional)
	//   $2: Limit (number of records per page)
	//   $3: Offset (starting record index)
	// Returns:
	//   All matching order item fields
	//   total_count: Total number of results ignoring pagination (for frontend pagination UI)
	// Business Logic:
	//   - Filters out soft-deleted items
	//   - Supports keyword-based filtering
	//   - Includes total result count via window function
	GetOrderItems(ctx context.Context, arg GetOrderItemsParams) ([]*GetOrderItemsRow, error)
	// GetOrderItemsActive: Retrieves active order items (duplicate-safe with GetOrderItems)
	// Purpose: Lists active (non-deleted) order items with pagination and optional search
	// Parameters:
	//   $1: Search keyword (order_id or product_id, optional)
	//   $2: Limit (pagination size)
	//   $3: Offset (pagination start)
	// Returns:
	//   Order item fields plus total matching count
	// Business Logic:
	//   - Behaves similarly to GetOrderItems
	//   - Used when clarity between active/trashed context is required
	GetOrderItemsActive(ctx context.Context, arg GetOrderItemsActiveParams) ([]*GetOrderItemsActiveRow, error)
	// GetOrderItemsByOrder: Retrieves active order items for a specific order
	// Purpose: Fetches all non-deleted order items under one order
	// Parameters:
	//   $1: order_id
	// Returns:
	//   List of active order items
	// Business Logic:
	//   - Excludes soft-deleted entries
	GetOrderItemsByOrder(ctx context.Context, orderID int32) ([]*OrderItem, error)
	// GetOrderItemsTrashed: Retrieves soft-deleted order items with pagination
	// Purpose: Allows review and management of trashed order items
	// Parameters:
	//   $1: Search keyword (order_id or product_id, optional)
	//   $2: Limit (number of rows per page)
	//   $3: Offset (starting point for pagination)
	// Returns:
	//   All matching deleted order item fields
	//   total_count: Total number of trashed results
	// Business Logic:
	//   - Only includes records with non-null deleted_at (trashed)
	//   - Enables optional keyword search and pagination
	//   - Sorted by deletion date for recent trash activity review
	GetOrderItemsTrashed(ctx context.Context, arg GetOrderItemsTrashedParams) ([]*GetOrderItemsTrashedRow, error)
	// GetOrders: Retrieves paginated list of active orders with search capability
	// Purpose: List all active orders for management UI
	// Parameters:
	//   $1: search_term - Optional text to filter orders by ID or total price (NULL for no filter)
	//   $2: limit - Maximum number of records to return (pagination limit)
	//   $3: offset - Number of records to skip (pagination offset)
	// Returns:
	//   All order fields plus total_count of matching records
	// Business Logic:
	//   - Excludes soft-deleted orders (deleted_at IS NULL)
	//   - Supports partial text matching on order_id and total_price fields (case-insensitive)
	//   - Returns newest orders first (created_at DESC)
	//   - Provides total_count for client-side pagination
	//   - Uses window function COUNT(*) OVER() for efficient total count
	GetOrders(ctx context.Context, arg GetOrdersParams) ([]*GetOrdersRow, error)
	// GetOrdersActive: Retrieves paginated list of active orders (identical to GetOrders)
	// Purpose: Maintains consistent API pattern with other active/trashed endpoints
	// Parameters:
	//   $1: search_term - Optional filter text for order ID or price
	//   $2: limit - Pagination limit
	//   $3: offset - Pagination offset
	// Returns:
	//   Active order records with total_count
	// Business Logic:
	//   - Same functionality as GetOrders
	//   - Exists for consistency in API design patterns
	// Note: Could be consolidated with GetOrders if duplicate functionality is undesired
	GetOrdersActive(ctx context.Context, arg GetOrdersActiveParams) ([]*GetOrdersActiveRow, error)
	// GetOrdersByMerchant: Retrieves merchant-specific orders with pagination
	// Purpose: List orders filtered by merchant ID
	// Parameters:
	//   $1: search_term - Optional text to filter orders
	//   $2: limit - Pagination limit
	//   $3: offset - Pagination offset
	//   $4: merchant_id - Optional merchant UUID to filter by (NULL for all merchants)
	// Returns:
	//   Order records with total_count
	// Business Logic:
	//   - Combines merchant filtering with search functionality
	//   - Maintains same sorting and pagination as other order queries
	//   - Useful for merchant-specific order dashboards
	//   - NULL merchant_id parameter returns all merchants' orders
	GetOrdersByMerchant(ctx context.Context, arg GetOrdersByMerchantParams) ([]*GetOrdersByMerchantRow, error)
	// GetOrdersTrashed: Retrieves paginated list of soft-deleted orders
	// Purpose: View and manage deleted orders for potential restoration
	// Parameters:
	//   $1: search_term - Optional text to filter trashed orders
	//   $2: limit - Maximum records per page
	//   $3: offset - Records to skip
	// Returns:
	//   Trashed order records with total_count
	// Business Logic:
	//   - Only returns soft-deleted records (deleted_at IS NOT NULL)
	//   - Maintains same search functionality as active order queries
	//   - Preserves chronological sorting (newest first)
	//   - Used in order recovery/audit interfaces
	//   - Includes total_count for pagination in trash management UI
	GetOrdersTrashed(ctx context.Context, arg GetOrdersTrashedParams) ([]*GetOrdersTrashedRow, error)
	// GetProductByID: Retrieves an active product by ID
	// Purpose: Display product details in storefront/merchant UI
	// Parameters:
	//   $1: product_id - ID of the product to retrieve
	// Returns:
	//   Complete product record if found and active
	// Business Logic:
	//   - Only returns non-deleted (active) products
	//   - Used for normal product display operations
	GetProductByID(ctx context.Context, productID int32) (*Product, error)
	// GetProductByIdTrashed: Retrieves product including soft-deleted ones
	// Purpose: Access products in trash/recycle bin
	// Parameters:
	//   $1: product_id - ID of the product to retrieve
	// Returns:
	//   Complete product record regardless of deletion status
	// Business Logic:
	//   - Bypasses soft-delete filter
	//   - Used for admin/recovery operations
	GetProductByIdTrashed(ctx context.Context, productID int32) (*Product, error)
	// GetProducts: Retrieves paginated list of active products with search capability
	// Purpose: List all active (non-deleted) products for display in UI
	// Parameters:
	//   $1: search_term - Optional text to filter products (NULL for no filter)
	//   $2: limit - Maximum number of records to return
	//   $3: offset - Number of records to skip for pagination
	// Returns:
	//   All product fields plus total_count of matching records
	// Business Logic:
	//   - Excludes soft-deleted products (deleted_at IS NULL)
	//   - Supports partial, case-insensitive search on name, description, brand, slug, and barcode
	//   - Orders results by newest first (created_at DESC)
	//   - Uses COUNT(*) OVER() to include total matching record count for pagination UI
	GetProducts(ctx context.Context, arg GetProductsParams) ([]*GetProductsRow, error)
	// GetProductsActive: Retrieves paginated list of active products (duplicate of GetProducts)
	// Purpose: Explicitly return active (non-deleted) products with search capability
	// Parameters:
	//   $1: search_term - Optional text to filter products (NULL for no filter)
	//   $2: limit - Maximum number of records to return
	//   $3: offset - Number of records to skip for pagination
	// Returns:
	//   All product fields plus total_count of matching records
	// Business Logic:
	//   - Excludes soft-deleted products (deleted_at IS NULL)
	//   - Supports partial, case-insensitive search on name, description, brand, slug, and barcode
	//   - Ordered by newest first (created_at DESC)
	//   - Useful if frontend/backend wants clearer distinction in naming
	GetProductsActive(ctx context.Context, arg GetProductsActiveParams) ([]*GetProductsActiveRow, error)
	// GetProductsByCategoryName: Retrieves paginated and filtered products under a specific category name
	// Purpose: Display products by category for customers or category-focused pages
	// Parameters:
	//   $1: category_name - The name of the category to filter by
	//   $2: search_term - Optional text to filter by product name or description
	//   $3: min_price - Minimum price filter (0 to ignore)
	//   $4: max_price - Maximum price filter (0 to ignore, defaults to very high value)
	//   $5: limit - Number of products to return (pagination)
	//   $6: offset - Number of products to skip (pagination)
	// Returns:
	//   - Filtered list of product fields including category name
	//   - total_count of all matching products for pagination UI
	// Business Logic:
	//   - Excludes soft-deleted products (deleted_at IS NULL)
	//   - Matches category name exactly
	//   - Supports case-insensitive partial search on name and description
	//   - Filters by category ID only if provided
	//   - Filters by price range only if values provided
	//   - Ordered by newest products first (created_at DESC)
	GetProductsByCategoryName(ctx context.Context, arg GetProductsByCategoryNameParams) ([]*GetProductsByCategoryNameRow, error)
	// GetProductsByMerchant: Retrieves paginated and filtered products owned by a specific merchant
	// Purpose: Allow merchants to view and manage their own products with advanced filtering options
	// Parameters:
	//   $1: merchant_id - Filter products belonging to this merchant
	//   $2: search_term - Optional text to filter by product name or description
	//   $3: category_id - Optional category filter (0 or NULL to ignore)
	//   $4: min_price - Minimum price filter (0 to ignore)
	//   $5: max_price - Maximum price filter (0 to ignore, defaults to very high value)
	//   $6: limit - Number of products to return (pagination)
	//   $7: offset - Number of products to skip (pagination)
	// Returns:
	//   - Filtered list of product fields including category name
	//   - total_count of all matching products for pagination UI
	// Business Logic:
	//   - Excludes soft-deleted products (deleted_at IS NULL)
	//   - Supports case-insensitive partial search on name and description
	//   - Filters by category ID only if provided
	//   - Filters by price range only if values provided (>= min_price and <= max_price)
	//   - Ordered by newest products first (created_at DESC)
	GetProductsByMerchant(ctx context.Context, arg GetProductsByMerchantParams) ([]*GetProductsByMerchantRow, error)
	// GetProductsTrashed: Retrieves paginated list of trashed (soft-deleted) products
	// Purpose: List deleted products for admin to manage recovery or audit
	// Parameters:
	//   $1: search_term - Optional text to filter trashed products (NULL for no filter)
	//   $2: limit - Maximum number of records to return
	//   $3: offset - Number of records to skip for pagination
	// Returns:
	//   All product fields plus total_count of matching trashed records
	// Business Logic:
	//   - Includes only soft-deleted products (deleted_at IS NOT NULL)
	//   - Supports partial, case-insensitive search on name, description, brand, slug, and barcode
	//   - Returns by newest first (created_at DESC)
	//   - Used for "Trash Bin" UI or soft-delete management
	GetProductsTrashed(ctx context.Context, arg GetProductsTrashedParams) ([]*GetProductsTrashedRow, error)
	GetResetToken(ctx context.Context, token string) (*ResetToken, error)
	// GetReviewByID: Retrieves a single active review by ID
	// Purpose: Display review details in UI
	// Parameters:
	//   $1: review_id - ID of the review to retrieve
	// Returns:
	//   Complete review record if found and active
	// Business Logic:
	//   - Only returns non-deleted (active) reviews
	//   - Used for displaying individual review details
	GetReviewByID(ctx context.Context, reviewID int32) (*Review, error)
	// Retrieves paginated reviews for all products belonging to a merchant
	//
	// Purpose: Display all reviews for merchant's products in dashboard
	//
	// Parameters:
	//   $1: merchant_id - ID of the merchant whose products' reviews to fetch
	//   $2: rating_filter - Optional rating value to filter by (NULL for all ratings)
	//   $3: limit - Maximum number of records to return
	//   $4: offset - Number of records to skip for pagination
	//
	// Returns:
	//   - Review fields with aggregated review details (images/videos) as JSON array
	//   - Includes total_count for pagination
	//
	// Business Logic:
	//   - Only shows active (non-deleted) reviews
	//   - Filters by merchant's products through JOIN
	//   - Optional rating filter (1-5 stars)
	//   - Aggregates review details (media attachments) as JSON array
	//   - Returns newest reviews first
	//   - Uses JOIN with products table to ensure merchant ownership
	GetReviewByMerchantId(ctx context.Context, arg GetReviewByMerchantIdParams) ([]*GetReviewByMerchantIdRow, error)
	// Retrieves paginated list of product reviews with details and optional rating filter
	//
	// Purpose: Display reviews for a specific product in storefront
	//
	// Parameters:
	//   $1: product_id - ID of the product to get reviews for
	//   $2: rating_filter - Optional rating value to filter by (NULL for all ratings)
	//   $3: limit - Maximum number of records to return
	//   $4: offset - Number of records to skip for pagination
	//
	// Returns:
	//   - Review fields with aggregated review details (images/videos) as JSON array
	//   - Includes total_count for pagination
	//
	// Business Logic:
	//   - Only shows active (non-deleted) reviews
	//   - Filters by specific product only
	//   - Optional rating filter (1-5 stars)
	//   - Aggregates review details (media attachments) as JSON array
	//   - Returns newest reviews first
	//   - Uses LEFT JOIN to include reviews without attachments
	GetReviewByProductId(ctx context.Context, arg GetReviewByProductIdParams) ([]*GetReviewByProductIdRow, error)
	// GetReviewDetail: Retrieves a single review detail that is not soft-deleted
	// Parameters:
	//   $1: review_detail_id - ID of the review detail
	// Business Logic:
	//   - Returns the review detail where deleted_at IS NULL
	// Returns: A single review_details record
	GetReviewDetail(ctx context.Context, reviewDetailID int32) (*ReviewDetail, error)
	// GetReviewDetailTrashed: Retrieves a single review detail that is not soft-deleted
	// Parameters:
	//   $1: review_detail_id - ID of the review detail
	// Business Logic:
	//   - Returns the review detail where deleted_at IS NULL
	// Returns: A single review_details record
	GetReviewDetailTrashed(ctx context.Context, reviewDetailID int32) (*ReviewDetail, error)
	// GetReviewDetails: Retrieves all review details (active and trashed)
	// Parameters:
	//   $1: search - Keyword to filter caption (case-insensitive, partial match)
	//   $2: limit - Pagination limit
	//   $3: offset - Pagination offset
	// Business Logic:
	//   - Returns both active and trashed records
	//   - Applies case-insensitive partial search on caption
	//   - Supports pagination
	// Returns: List of review details with total_count metadata
	GetReviewDetails(ctx context.Context, arg GetReviewDetailsParams) ([]*GetReviewDetailsRow, error)
	// GetReviewDetailsActive: Retrieves active (non-deleted) review details
	// Parameters:
	//   $1: search - Keyword to filter caption (case-insensitive, partial match)
	//   $2: limit - Pagination limit
	//   $3: offset - Pagination offset
	// Business Logic:
	//   - Returns only records where deleted_at IS NULL
	//   - Applies case-insensitive partial search on caption
	//   - Supports pagination
	// Returns: List of active review details with total_count metadata
	GetReviewDetailsActive(ctx context.Context, arg GetReviewDetailsActiveParams) ([]*GetReviewDetailsActiveRow, error)
	// GetTrashedReviewDetails: Retrieves trashed (soft-deleted) review details
	// Parameters:
	//   $1: search - Keyword to filter caption (case-insensitive, partial match)
	//   $2: limit - Pagination limit
	//   $3: offset - Pagination offset
	// Business Logic:
	//   - Returns only records where deleted_at IS NOT NULL
	//   - Applies case-insensitive partial search on caption
	//   - Supports pagination
	// Returns: List of trashed review details with total_count metadata
	GetReviewDetailsTrashed(ctx context.Context, arg GetReviewDetailsTrashedParams) ([]*GetReviewDetailsTrashedRow, error)
	// GetReviews: Retrieves paginated list of all reviews (both active and trashed) with search capability
	// Purpose: Display reviews in admin dashboard
	// Parameters:
	//   $1: search_term - Optional text to filter reviews by ID or name (NULL for no filter)
	//   $2: limit - Maximum number of records to return
	//   $3: offset - Number of records to skip for pagination
	// Returns:
	//   All review fields plus total_count of matching records
	// Business Logic:
	//   - Includes both active and trashed reviews
	//   - Supports partial text matching on review_id (cast as text) and name fields (case-insensitive)
	//   - Returns newest reviews first (created_at DESC)
	//   - Provides total_count for pagination calculations
	GetReviews(ctx context.Context, arg GetReviewsParams) ([]*GetReviewsRow, error)
	// GetReviewsActive: Retrieves paginated list of active reviews with search capability
	// Purpose: Display active reviews in storefront/admin UI
	// Parameters:
	//   $1: search_term - Optional text to filter reviews by ID or name (NULL for no filter)
	//   $2: limit - Maximum number of records to return
	//   $3: offset - Number of records to skip for pagination
	// Returns:
	//   All review fields plus total_count of matching records
	// Business Logic:
	//   - Excludes soft-deleted reviews (deleted_at IS NULL)
	//   - Supports partial text matching on review_id (cast as text) and name fields (case-insensitive)
	//   - Returns newest reviews first (created_at DESC)
	//   - Provides total_count for pagination calculations
	GetReviewsActive(ctx context.Context, arg GetReviewsActiveParams) ([]*GetReviewsActiveRow, error)
	// GetReviewsTrashed: Retrieves paginated list of trashed reviews with search capability
	// Purpose: Display deleted reviews in admin recycle bin
	// Parameters:
	//   $1: search_term - Optional text to filter reviews by ID or name (NULL for no filter)
	//   $2: limit - Maximum number of records to return
	//   $3: offset - Number of records to skip for pagination
	// Returns:
	//   All review fields plus total_count of matching records
	// Business Logic:
	//   - Only includes soft-deleted reviews (deleted_at IS NOT NULL)
	//   - Supports partial text matching on review_id (cast as text) and name fields (case-insensitive)
	//   - Returns newest reviews first (created_at DESC)
	//   - Provides total_count for pagination calculations
	GetReviewsTrashed(ctx context.Context, arg GetReviewsTrashedParams) ([]*GetReviewsTrashedRow, error)
	// GetRole: Retrieves role details by role_id
	// Purpose: Fetch a single role record (regardless of deleted status)
	// Parameters:
	//   $1: Role ID
	// Returns:
	//   role_id, role_name, and timestamps
	GetRole(ctx context.Context, roleID int32) (*Role, error)
	// GetRoleByName: Retrieves role by exact role name
	// Purpose: Check role existence or fetch role info based on name
	// Parameters:
	//   $1: Role name (exact match)
	// Returns:
	//   role_id, role_name, and timestamps
	GetRoleByName(ctx context.Context, roleName string) (*Role, error)
	// GetRoles: Retrieves all roles (active & trashed) with optional name search and pagination
	// Purpose: General listing of roles regardless of status
	// Parameters:
	//   $1: Search query (role name, nullable)
	//   $2: Limit (number of records per page)
	//   $3: Offset (starting index for pagination)
	// Returns:
	//   role_id, role_name, timestamps, and total_count (for pagination support)
	// Business Logic:
	//   - Supports fuzzy search on role_name
	//   - Includes both active and trashed roles
	//   - Useful for admin panels with filters and pagination
	GetRoles(ctx context.Context, arg GetRolesParams) ([]*GetRolesRow, error)
	// GetShippingAddress: Retrieves paginated list of all shipping addresses (active and trashed) with search capability
	// Purpose: Display shipping addresses in admin dashboard
	// Parameters:
	//   $1: search_term - Optional text to filter addresses by ID or alamat (NULL for no filter)
	//   $2: limit - Maximum number of records to return
	//   $3: offset - Number of records to skip for pagination
	// Returns:
	//   All shipping address fields plus total_count of matching records
	// Business Logic:
	//   - Includes both active and trashed addresses
	//   - Supports partial text matching on shipping_address_id (cast as text) and alamat fields (case-insensitive)
	//   - Returns newest addresses first (created_at DESC)
	//   - Provides total_count for pagination calculations
	GetShippingAddress(ctx context.Context, arg GetShippingAddressParams) ([]*GetShippingAddressRow, error)
	// GetShippingAddressActive: Retrieves paginated list of active shipping addresses with search capability
	// Purpose: Display active addresses in checkout/address book UI
	// Parameters:
	//   $1: search_term - Optional text to filter addresses by ID or alamat (NULL for no filter)
	//   $2: limit - Maximum number of records to return
	//   $3: offset - Number of records to skip for pagination
	// Returns:
	//   All shipping address fields plus total_count of matching records
	// Business Logic:
	//   - Excludes soft-deleted addresses (deleted_at IS NULL)
	//   - Supports partial text matching on shipping_address_id (cast as text) and alamat fields (case-insensitive)
	//   - Returns newest addresses first (created_at DESC)
	//   - Provides total_count for pagination calculations
	GetShippingAddressActive(ctx context.Context, arg GetShippingAddressActiveParams) ([]*GetShippingAddressActiveRow, error)
	// GetShippingAddressByOrderID: Retrieves shipping address for a specific order
	// Mengambil alamat pengiriman untuk pesanan tertentu
	// Parameters:
	//   $1: order_id - ID of the order to find shipping address for
	//   $1: order_id - ID pesanan untuk mencari alamat pengiriman
	// Returns:
	//   Complete shipping address record associated with the order
	//   Seluruh record alamat pengiriman terkait pesanan
	// Business Logic:
	//   - Used to display shipping info for completed orders
	//   - Digunakan untuk menampilkan info pengiriman pesanan selesai
	GetShippingAddressByOrderID(ctx context.Context, orderID int32) (*ShippingAddress, error)
	// GetShippingAddressTrashed: Retrieves paginated list of trashed shipping addresses with search capability
	// Purpose: Display deleted addresses in admin recycle bin
	// Parameters:
	//   $1: search_term - Optional text to filter addresses by ID or alamat (NULL for no filter)
	//   $2: limit - Maximum number of records to return
	//   $3: offset - Number of records to skip for pagination
	// Returns:
	//   All shipping address fields plus total_count of matching records
	// Business Logic:
	//   - Only includes soft-deleted addresses (deleted_at IS NOT NULL)
	//   - Supports partial text matching on shipping_address_id (cast as text) and alamat fields (case-insensitive)
	//   - Returns newest addresses first (created_at DESC)
	//   - Provides total_count for pagination calculations
	GetShippingAddressTrashed(ctx context.Context, arg GetShippingAddressTrashedParams) ([]*GetShippingAddressTrashedRow, error)
	// GetShippingByID: Retrieves a single active shipping address by ID
	// Mengambil satu alamat pengiriman aktif berdasarkan ID
	// Parameters:
	//   $1: shipping_address_id - ID of the shipping address to retrieve
	//   $1: shipping_address_id - ID alamat pengiriman yang akan diambil
	// Returns:
	//   Complete shipping address record if found and active
	//   Seluruh record alamat pengiriman jika ditemukan dan aktif
	// Business Logic:
	//   - Only returns non-deleted (active) addresses
	//   - Hanya mengembalikan alamat yang tidak terhapus (aktif)
	GetShippingByID(ctx context.Context, shippingAddressID int32) (*ShippingAddress, error)
	// GetSliderByID: Retrieves a single active slider by ID
	// Mengambil satu slider aktif berdasarkan ID
	// Parameters:
	//   $1: slider_id - ID slider yang akan diambil
	// Returns:
	//   Complete slider record if found and active
	//   Seluruh record slider jika ditemukan dan aktif
	// Business Logic:
	//   - Only returns non-deleted (active) sliders
	//   - Hanya mengembalikan slider yang tidak terhapus (aktif)
	GetSliderByID(ctx context.Context, sliderID int32) (*Slider, error)
	// GetSliders: Retrieves all sliders (active & trashed) with optional name search and pagination
	// Purpose: General listing of sliders regardless of status
	// Parameters:
	//   $1: search_term - Optional text to filter sliders by name (NULL for no filter)
	//   $2: limit - Maximum number of records to return
	//   $3: offset - Number of records to skip for pagination
	// Returns:
	//   All slider fields plus total_count of matching records
	// Business Logic:
	//   - Includes both active and trashed sliders
	//   - Supports partial text matching on name field (case-insensitive)
	//   - Returns newest sliders first (created_at DESC)
	//   - Provides total_count for pagination calculations
	GetSliders(ctx context.Context, arg GetSlidersParams) ([]*GetSlidersRow, error)
	// GetSlidersActive: Retrieves active sliders with optional name search and pagination
	// Purpose: Display active sliders for frontend/backend UI
	// Parameters:
	//   $1: search_term - Optional text to filter sliders by name (NULL for no filter)
	//   $2: limit - Maximum number of records to return
	//   $3: offset - Number of records to skip for pagination
	// Returns:
	//   All slider fields plus total_count of matching records
	// Business Logic:
	//   - Excludes soft-deleted sliders (deleted_at IS NULL)
	//   - Supports partial text matching on name field (case-insensitive)
	//   - Returns newest sliders first (created_at DESC)
	//   - Provides total_count for pagination calculations
	GetSlidersActive(ctx context.Context, arg GetSlidersActiveParams) ([]*GetSlidersActiveRow, error)
	// GetSlidersTrashed: Retrieves trashed sliders with optional name search and pagination
	// Purpose: Display deleted sliders in admin recycle bin
	// Parameters:
	//   $1: search_term - Optional text to filter sliders by name (NULL for no filter)
	//   $2: limit - Maximum number of records to return
	//   $3: offset - Number of records to skip for pagination
	// Returns:
	//   All slider fields plus total_count of matching records
	// Business Logic:
	//   - Only includes soft-deleted sliders (deleted_at IS NOT NULL)
	//   - Supports partial text matching on name field (case-insensitive)
	//   - Returns newest sliders first (created_at DESC)
	//   - Provides total_count for pagination calculations
	GetSlidersTrashed(ctx context.Context, arg GetSlidersTrashedParams) ([]*GetSlidersTrashedRow, error)
	// GetTransactionByID: Retrieves transaction by transaction ID
	// Purpose: Fetch specific transaction details
	// Parameters:
	//   $1: transaction_id - The unique transaction ID
	// Returns: Full transaction record if active
	// Business Logic:
	//   - Excludes deleted transactions
	//   - Used for transaction details/receipts
	//   - Primary lookup for transaction management
	GetTransactionByID(ctx context.Context, transactionID int32) (*Transaction, error)
	// GetTransactionByMerchant: Retrieves merchant-specific transactions with pagination
	// Purpose: List transactions filtered by merchant ID
	// Parameters:
	//   $1: search_term - Optional text to filter transactions
	//   $2: merchant_id - Optional merchant ID to filter by (NULL for all merchants)
	//   $3: limit - Pagination limit
	//   $4: offset - Pagination offset
	// Returns:
	//   Transaction records with total_count
	// Business Logic:
	//   - Combines merchant filtering with search functionality
	//   - Maintains same sorting and pagination as other transaction queries
	//   - Useful for merchant-specific transaction reporting
	//   - NULL merchant_id parameter returns all merchants' transactions
	GetTransactionByMerchant(ctx context.Context, arg GetTransactionByMerchantParams) ([]*GetTransactionByMerchantRow, error)
	// GetTransactionByOrderID: Retrieves transaction by order reference
	// Purpose: Lookup transaction associated with specific order
	// Parameters:
	//   $1: order_id - The order ID to search by
	// Returns: Transaction record if found and active
	// Business Logic:
	//   - Only returns non-deleted transactions
	//   - Used for order payment verification
	//   - Helps prevent duplicate payments
	GetTransactionByOrderID(ctx context.Context, orderID int32) (*Transaction, error)
	// GetTransactions: Retrieves paginated list of active transactions with search capability
	// Purpose: List all active transactions for management UI
	// Parameters:
	//   $1: search_term - Optional text to filter transactions by payment method or status (NULL for no filter)
	//   $2: limit - Maximum number of records to return (pagination limit)
	//   $3: offset - Number of records to skip (pagination offset)
	// Returns:
	//   All transaction fields plus total_count of matching records
	// Business Logic:
	//   - Excludes soft-deleted transactions (deleted_at IS NULL)
	//   - Supports partial text matching on payment_method and payment_status fields (case-insensitive)
	//   - Returns newest transactions first (created_at DESC)
	//   - Provides total_count for client-side pagination
	//   - Uses window function COUNT(*) OVER() for efficient total count
	GetTransactions(ctx context.Context, arg GetTransactionsParams) ([]*GetTransactionsRow, error)
	// GetTransactionsActive: Retrieves paginated list of active transactions (identical to GetTransactions)
	// Purpose: Maintains consistent API pattern with other active/trashed endpoints
	// Parameters:
	//   $1: search_term - Optional filter text for payment method/status
	//   $2: limit - Pagination limit
	//   $3: offset - Pagination offset
	// Returns:
	//   Active transaction records with total_count
	// Business Logic:
	//   - Same functionality as GetTransactions
	//   - Exists for consistency in API design patterns
	// Note: Could be consolidated with GetTransactions if duplicate functionality is undesired
	GetTransactionsActive(ctx context.Context, arg GetTransactionsActiveParams) ([]*GetTransactionsActiveRow, error)
	// GetTransactionsTrashed: Retrieves paginated list of soft-deleted transactions
	// Purpose: View and manage deleted transactions for audit/recovery
	// Parameters:
	//   $1: search_term - Optional text to filter trashed transactions
	//   $2: limit - Maximum records per page
	//   $3: offset - Records to skip
	// Returns:
	//   Trashed transaction records with total_count
	// Business Logic:
	//   - Only returns soft-deleted records (deleted_at IS NOT NULL)
	//   - Maintains same search functionality as active transaction queries
	//   - Preserves chronological sorting (newest first)
	//   - Used in transaction recovery/audit interfaces
	//   - Includes total_count for pagination in trash management UI
	GetTransactionsTrashed(ctx context.Context, arg GetTransactionsTrashedParams) ([]*GetTransactionsTrashedRow, error)
	GetTrashedMerchantDocuments(ctx context.Context, arg GetTrashedMerchantDocumentsParams) ([]*GetTrashedMerchantDocumentsRow, error)
	// GetTrashedRoles: Retrieves only soft-deleted roles with optional search and pagination
	// Purpose: For trash/recycle bin management
	// Parameters:
	//   $1: Search query (nullable)
	//   $2: Limit
	//   $3: Offset
	// Returns:
	//   role_id, role_name, timestamps, and total_count
	GetTrashedRoles(ctx context.Context, arg GetTrashedRolesParams) ([]*GetTrashedRolesRow, error)
	// GetTrashedUserRoles: Retrieves all soft-deleted roles for a given user
	// Purpose: Review previously deleted role assignments for recovery or audit
	// Parameters:
	//   $1: User ID
	// Returns:
	//   user_role_id, user_id, role_id, role_name, timestamps
	// Business Logic:
	//   - Joins with roles to show role name
	//   - Orders by most recently trashed
	GetTrashedUserRoles(ctx context.Context, userID int32) ([]*GetTrashedUserRolesRow, error)
	// GetUserByEmail: Retrieves active user by email
	// Purpose: Lookup user by email address (for authentication)
	// Parameters:
	//   $1: email - Exact email address to search for
	// Returns: User record if found and active
	// Business Logic:
	//   - Case-sensitive exact match on email
	//   - Excludes deleted users
	//   - Used during login/authentication flows
	//   - Helps prevent duplicate accounts
	GetUserByEmail(ctx context.Context, email string) (*User, error)
	// GetUserByEmailAndVerify: Retrieves active and verified user by email
	// Purpose: Used for login/auth verification
	// Parameters:
	//   $1: email - Email address
	// Returns: User record if found, active and valid
	// Business Logic:
	//   - Excludes deleted users
	//   - Used during authentication flow
	GetUserByEmailAndVerify(ctx context.Context, email string) (*User, error)
	// GetUserByID: Retrieves active user by ID
	// Purpose: Fetch specific user details
	// Parameters:
	//   $1: user_id - ID of user to retrieve
	// Returns: Full user record if found and active
	// Business Logic:
	//   - Excludes deleted users
	//   - Used for user profile viewing/editing
	//   - Primary lookup for user management
	GetUserByID(ctx context.Context, userID int32) (*User, error)
	// GetUserByIdAndVerify: Retrieves active and verified user by ID
	// Purpose: Fetch user by ID with validation
	// Parameters:
	//   $1: user_id - ID of the user to retrieve
	// Returns: Full user record if found and active
	// Business Logic:
	//   - Excludes deleted users
	//   - Use for cross-service validation and ownership checks
	GetUserByIdAndVerify(ctx context.Context, userID int32) (*User, error)
	// Purpose: Fetch a user based on their verification code.
	// Parameters:
	//   $1: verification_code - The verification code of the user to fetch.
	// Returns:
	//   - User record matching the provided verification code.
	// Business Logic:
	//   - Filters the users table to find a user based on their verification code.
	GetUserByVerificationCode(ctx context.Context, verificationCode string) (*User, error)
	// GetUserRoles: Retrieves all roles assigned to a specific user
	// Purpose: Identify the access level(s) of a user
	// Parameters:
	//   $1: User ID
	// Returns:
	//   List of roles (id, name, timestamps)
	GetUserRoles(ctx context.Context, userID int32) ([]*Role, error)
	// GetUserTrashed: Retrieves paginated list of soft-deleted users
	// Purpose: View and manage deleted users for potential restoration
	// Parameters:
	//   $1: search_term - Optional text to filter trashed users
	//   $2: limit - Maximum records per page
	//   $3: offset - Records to skip
	// Returns:
	//   Trashed user records with total_count
	// Business Logic:
	//   - Only returns soft-deleted records (deleted_at IS NOT NULL)
	//   - Maintains same search functionality as active user queries
	//   - Preserves chronological sorting (newest first)
	//   - Used in user recovery/audit interfaces
	//   - Includes total_count for pagination in trash management UI
	GetUserTrashed(ctx context.Context, arg GetUserTrashedParams) ([]*GetUserTrashedRow, error)
	// GetUsers: Retrieves paginated list of active users with search capability
	// Purpose: List all active users for management UI
	// Parameters:
	//   $1: search_term - Optional text to filter users by name or email (NULL for no filter)
	//   $2: limit - Maximum number of records to return (pagination limit)
	//   $3: offset - Number of records to skip (pagination offset)
	// Returns:
	//   All user fields plus total_count of matching records
	// Business Logic:
	//   - Excludes soft-deleted users (deleted_at IS NULL)
	//   - Supports partial text matching on firstname, lastname, and email fields (case-insensitive)
	//   - Returns newest users first (created_at DESC)
	//   - Provides total_count for client-side pagination
	//   - Uses window function COUNT(*) OVER() for efficient total count
	GetUsers(ctx context.Context, arg GetUsersParams) ([]*GetUsersRow, error)
	// GetUsersActive: Retrieves paginated list of active users (identical to GetUsers)
	// Purpose: Maintains consistent API pattern with other active/trashed endpoints
	// Parameters:
	//   $1: search_term - Optional filter text for name/email
	//   $2: limit - Pagination limit
	//   $3: offset - Pagination offset
	// Returns:
	//   Active user records with total_count
	// Business Logic:
	//   - Same functionality as GetUsers
	//   - Exists for consistency in API design patterns
	// Note: Could be consolidated with GetUsers if duplicate functionality is undesired
	GetUsersActive(ctx context.Context, arg GetUsersActiveParams) ([]*GetUsersActiveRow, error)
	// GetYearlyAmountTransactionFailed: Retrieves yearly failed transaction metrics
	// Purpose: Generate annual reports of failed transactions
	// Parameters:
	//   $1: Reference year for comparison (current year as integer)
	// Returns:
	//   year: Year as text
	//   total_failed: Count of failed transactions
	//   total_amount: Sum of failed transaction amounts
	// Business Logic:
	//   - Compares current year with previous year automatically
	//   - Only includes failed (payment_status = 'failed') transactions
	//   - Excludes deleted transactions
	//   - Includes gap-filling for years with no transactions
	//   - Returns 0 values for years with no failed transactions
	//   - Orders by most recent year first
	GetYearlyAmountTransactionFailed(ctx context.Context, dollar_1 int32) ([]*GetYearlyAmountTransactionFailedRow, error)
	// GetYearlyAmountTransactionFailedByMerchant: Retrieves yearly failed transaction metrics
	// Purpose: Generate annual reports of failed transactions by merchant_id
	// Parameters:
	//   $1: Reference year for comparison (current year as integer)
	//   $2: Merchant ID
	// Returns:
	//   year: Year as text
	//   total_failed: Count of failed transactions
	//   total_amount: Sum of failed transaction amounts
	// Business Logic:
	//   - Compares current year with previous year automatically
	//   - Only includes failed (payment_status = 'failed') transactions
	//   - Excludes deleted transactions
	//   - Includes gap-filling for years with no transactions
	//   - Returns 0 values for years with no failed transactions
	//   - Orders by most recent year first
	GetYearlyAmountTransactionFailedByMerchant(ctx context.Context, arg GetYearlyAmountTransactionFailedByMerchantParams) ([]*GetYearlyAmountTransactionFailedByMerchantRow, error)
	// GetYearlyAmountTransactionSuccess: Retrieves yearly success transaction metrics
	// Purpose: Generate annual reports of successful transactions
	// Parameters:
	//   $1: Reference year for comparison (current year as integer)
	// Returns:
	//   year: Year as text
	//   total_success: Count of successful transactions
	//   total_amount: Sum of successful transaction amounts
	// Business Logic:
	//   - Compares current year with previous year automatically
	//   - Only includes successful (payment_status = 'success') transactions
	//   - Excludes deleted transactions
	//   - Includes gap-filling for years with no transactions
	//   - Returns 0 values for years with no successful transactions
	//   - Orders by most recent year first
	GetYearlyAmountTransactionSuccess(ctx context.Context, dollar_1 int32) ([]*GetYearlyAmountTransactionSuccessRow, error)
	// GetYearlyAmountTransactionSuccessByMerchant: Retrieves yearly success transaction metrics
	// Purpose: Generate annual reports of successful transactions by merchant_id
	// Parameters:
	//   $1: Reference year for comparison (current year as integer)
	//   $2: Merchant ID
	// Returns:
	//   year: Year as text
	//   total_success: Count of successful transactions
	//   total_amount: Sum of successful transaction amounts
	// Business Logic:
	//   - Compares current year with previous year automatically
	//   - Only includes successful (payment_status = 'success') transactions
	//   - Excludes deleted transactions
	//   - Includes gap-filling for years with no transactions
	//   - Returns 0 values for years with no successful transactions
	//   - Orders by most recent year first
	GetYearlyAmountTransactionSuccessByMerchant(ctx context.Context, arg GetYearlyAmountTransactionSuccessByMerchantParams) ([]*GetYearlyAmountTransactionSuccessByMerchantRow, error)
	// GetYearlyCategory: Retrieves annual sales performance for categories over a 5-year span
	// Purpose: Enables long-term product category performance trend analysis
	// Parameters:
	//   $1: Reference date (timestamp) - determines the 5-year analysis window
	// Returns:
	//   year: 4-digit year as text
	//   category_id: Unique category identifier
	//   category_name: Display name of the category
	//   order_count: Annual number of orders involving this category
	//   items_sold: Quantity of products sold from this category
	//   total_revenue: Total sales revenue from category products
	//   unique_products_sold: Count of unique products sold within the category
	// Business Logic:
	//   - Covers the current year and previous four years (5-year window)
	//   - Filters out soft-deleted data from all related tables
	//   - Provides both volume and value metrics for category-level evaluation
	//   - Results sorted by year and revenue to show historical trends
	//   - Suitable for business reviews and strategic category planning
	GetYearlyCategory(ctx context.Context, dollar_1 time.Time) ([]*GetYearlyCategoryRow, error)
	// GetYearlyCategoryById: Retrieves annual sales performance for categories over a 5-year span by category_id
	// Purpose: Enables long-term product category performance trend analysis
	// Parameters:
	//   $1: Reference date (timestamp) - determines the 5-year analysis window
	//   $2: Category ID
	// Returns:
	//   year: 4-digit year as text
	//   category_id: Unique category identifier
	//   category_name: Display name of the category
	//   order_count: Annual number of orders involving this category
	//   items_sold: Quantity of products sold from this category
	//   total_revenue: Total sales revenue from category products
	//   unique_products_sold: Count of unique products sold within the category
	// Business Logic:
	//   - Covers the current year and previous four years (5-year window)
	//   - Filters out soft-deleted data from all related tables
	//   - Provides both volume and value metrics for category-level evaluation
	//   - Results sorted by year and revenue to show historical trends
	//   - Suitable for business reviews and strategic category planning
	GetYearlyCategoryById(ctx context.Context, arg GetYearlyCategoryByIdParams) ([]*GetYearlyCategoryByIdRow, error)
	// GetYearlyCategoryByMerchant: Retrieves annual sales performance for categories over a 5-year span by merchant_id
	// Purpose: Enables long-term product category performance trend analysis
	// Parameters:
	//   $1: Reference date (timestamp) - determines the 5-year analysis window
	//   $2: Merchant ID
	// Returns:
	//   year: 4-digit year as text
	//   category_id: Unique category identifier
	//   category_name: Display name of the category
	//   order_count: Annual number of orders involving this category
	//   items_sold: Quantity of products sold from this category
	//   total_revenue: Total sales revenue from category products
	//   unique_products_sold: Count of unique products sold within the category
	// Business Logic:
	//   - Covers the current year and previous four years (5-year window)
	//   - Filters out soft-deleted data from all related tables
	//   - Provides both volume and value metrics for category-level evaluation
	//   - Results sorted by year and revenue to show historical trends
	//   - Suitable for business reviews and strategic category planning
	GetYearlyCategoryByMerchant(ctx context.Context, arg GetYearlyCategoryByMerchantParams) ([]*GetYearlyCategoryByMerchantRow, error)
	// GetYearlyOrder: Retrieves yearly order summary over the past 5 years
	// Purpose: Enables long-term trend analysis of sales performance
	// Parameters:
	//   $1: Reference date (timestamp) - defines the 5-year analysis window
	// Returns:
	//   year: 4-digit year as string
	//   order_count: Total number of orders in the year
	//   total_revenue: Sum of total price from all orders
	//   total_items_sold: Total quantity of items sold in the year
	//   active_cashiers: Number of distinct cashier IDs involved in transactions
	//   unique_products_sold: Number of unique products sold
	// Business Logic:
	//   - Covers a rolling 5-year window up to the reference year
	//   - Filters out deleted records to ensure data consistency
	//   - Useful for high-level KPI tracking, forecasting, and strategic planning
	//   - Includes both volume and revenue metrics for comprehensive reporting
	//   - Results sorted by year in ascending order
	GetYearlyOrder(ctx context.Context, dollar_1 time.Time) ([]*GetYearlyOrderRow, error)
	// GetYearlyOrderByMerchant: Retrieves yearly order summary over the past 5 years by merchant_id
	// Purpose: Enables long-term trend analysis of sales performance
	// Parameters:
	//   $1: Reference date (timestamp) - defines the 5-year analysis window
	// Returns:
	//   year: 4-digit year as string
	//   order_count: Total number of orders in the year
	//   total_revenue: Sum of total price from all orders
	//   total_items_sold: Total quantity of items sold in the year
	//   active_cashiers: Number of distinct cashier IDs involved in transactions
	//   unique_products_sold: Number of unique products sold
	// Business Logic:
	//   - Covers a rolling 5-year window up to the reference year
	//   - Filters out deleted records to ensure data consistency
	//   - Useful for high-level KPI tracking, forecasting, and strategic planning
	//   - Includes both volume and revenue metrics for comprehensive reporting
	//   - Results sorted by year in ascending order
	GetYearlyOrderByMerchant(ctx context.Context, arg GetYearlyOrderByMerchantParams) ([]*GetYearlyOrderByMerchantRow, error)
	// GetYearlyTotalPrice: Retrieves annual revenue with category/product validation
	// Purpose: Provides year-over-year revenue analysis with product hierarchy verification
	// Parameters:
	//   $1: Reference year for comparison (current year)
	// Returns:
	//   year: Year as text
	//   total_revenue: Annual revenue total (0 if no sales)
	// Business Logic:
	//   - Compares current year with previous year automatically
	//   - Validates product/category relationships through joins
	//   - Excludes deleted records across all joined tables
	//   - Ensures complete year reporting even with no sales
	//   - Orders results by most recent year first
	GetYearlyTotalPrice(ctx context.Context, dollar_1 int32) ([]*GetYearlyTotalPriceRow, error)
	// GetYearlyTotalPriceById: Retrieves annual revenue with category/product validation by category_id
	// Purpose: Provides year-over-year revenue analysis with product hierarchy verification
	// Parameters:
	//   $1: Reference year for comparison (current year)
	//   $2: Category ID
	// Returns:
	//   year: Year as text
	//   total_revenue: Annual revenue total (0 if no sales)
	// Business Logic:
	//   - Compares current year with previous year automatically
	//   - Validates product/category relationships through joins
	//   - Excludes deleted records across all joined tables
	//   - Ensures complete year reporting even with no sales
	//   - Orders results by most recent year first
	GetYearlyTotalPriceById(ctx context.Context, arg GetYearlyTotalPriceByIdParams) ([]*GetYearlyTotalPriceByIdRow, error)
	// GetYearlyTotalPriceByMerchant: Retrieves annual revenue with category/product validation by merchant_id
	// Purpose: Provides year-over-year revenue analysis with product hierarchy verification
	// Parameters:
	//   $1: Reference year for comparison (current year)
	//   $2: Merchant ID
	// Returns:
	//   year: Year as text
	//   total_revenue: Annual revenue total (0 if no sales)
	// Business Logic:
	//   - Compares current year with previous year automatically
	//   - Validates product/category relationships through joins
	//   - Excludes deleted records across all joined tables
	//   - Ensures complete year reporting even with no sales
	//   - Orders results by most recent year first
	GetYearlyTotalPriceByMerchant(ctx context.Context, arg GetYearlyTotalPriceByMerchantParams) ([]*GetYearlyTotalPriceByMerchantRow, error)
	// GetYearlyTotalRevenue: Retrieves yearly total revenue for current and previous year
	// Purpose: Show year-over-year revenue trends
	// Parameters:
	//   $1: The current year (integer)
	// Returns:
	//   year: Year (as string)
	//   total_revenue: Total revenue (SUM of order totals) for the year (0 if no revenue)
	// Business Logic:
	//   - Automatically compares revenue between current and previous year
	//   - Includes zero-value years for complete data visualization
	//   - Filters only active/non-deleted orders and order items
	GetYearlyTotalRevenue(ctx context.Context, dollar_1 int32) ([]*GetYearlyTotalRevenueRow, error)
	// GetYearlyTotalRevenueById: Retrieves yearly total revenue for current and previous year by order_id
	// Purpose: Show year-over-year revenue trends
	// Parameters:
	//   $1: The current year (integer)
	//   $2: Order ID
	// Returns:
	//   year: Year (as string)
	//   total_revenue: Total revenue (SUM of order totals) for the year (0 if no revenue)
	// Business Logic:
	//   - Automatically compares revenue between current and previous year
	//   - Includes zero-value years for complete data visualization
	//   - Filters only active/non-deleted orders and order items
	GetYearlyTotalRevenueById(ctx context.Context, arg GetYearlyTotalRevenueByIdParams) ([]*GetYearlyTotalRevenueByIdRow, error)
	// GetYearlyTotalRevenueByMerchant: Retrieves yearly total revenue for current and previous year by merchant_id
	// Purpose: Show year-over-year revenue trends
	// Parameters:
	//   $1: The current year (integer)
	//   $2: Order ID
	// Returns:
	//   year: Year (as string)
	//   total_revenue: Total revenue (SUM of order totals) for the year (0 if no revenue)
	// Business Logic:
	//   - Automatically compares revenue between current and previous year
	//   - Includes zero-value years for complete data visualization
	//   - Filters only active/non-deleted orders and order items
	GetYearlyTotalRevenueByMerchant(ctx context.Context, arg GetYearlyTotalRevenueByMerchantParams) ([]*GetYearlyTotalRevenueByMerchantRow, error)
	// GetYearlyTransactionMethodsByMerchantFailed: Analyzes failed transactions by merchant and payment method yearly
	// Parameters:
	//   $1: Reference date (timestamp) - determines the 5-year analysis window
	// Returns:
	//   year: 4-digit year as text
	//   merchant_id: The merchant identifier
	//   merchant_name: The merchant's name
	//   payment_method: The payment method used
	//   total_transactions: Count of failed transactions
	//   total_amount: Total amount that failed processing
	GetYearlyTransactionMethodsByMerchantFailed(ctx context.Context, arg GetYearlyTransactionMethodsByMerchantFailedParams) ([]*GetYearlyTransactionMethodsByMerchantFailedRow, error)
	// GetYearlyTransactionMethodsByMerchantSuccess: Analyzes successful transactions by merchant and payment method yearly
	// Parameters:
	//   $1: Reference date (timestamp) - determines the 5-year analysis window
	// Returns:
	//   year: 4-digit year as text
	//   merchant_id: The merchant identifier
	//   merchant_name: The merchant's name
	//   payment_method: The payment method used
	//   total_transactions: Count of successful transactions
	//   total_amount: Total amount processed by this method
	GetYearlyTransactionMethodsByMerchantSuccess(ctx context.Context, arg GetYearlyTransactionMethodsByMerchantSuccessParams) ([]*GetYearlyTransactionMethodsByMerchantSuccessRow, error)
	// GetYearlyTransactionMethodsFailed: Analyzes failed payment method usage by year
	// Parameters:
	//   $1: Reference date (timestamp) - determines the 5-year analysis window
	// Returns:
	//   year: 4-digit year as text
	//   payment_method: The payment method used
	//   total_transactions: Count of failed transactions
	//   total_amount: Total amount that failed processing
	GetYearlyTransactionMethodsFailed(ctx context.Context, dollar_1 time.Time) ([]*GetYearlyTransactionMethodsFailedRow, error)
	// GetYearlyTransactionMethodsSuccess: Analyzes successful payment method usage by year
	// Parameters:
	//   $1: Reference date (timestamp) - determines the 5-year analysis window
	// Returns:
	//   year: 4-digit year as text
	//   payment_method: The payment method used
	//   total_transactions: Count of successful transactions
	//   total_amount: Total amount processed by this method
	GetYearlyTransactionMethodsSuccess(ctx context.Context, dollar_1 time.Time) ([]*GetYearlyTransactionMethodsSuccessRow, error)
	// RemoveRoleFromUser: Permanently removes a role from a user
	// Purpose: Hard delete of a user-role mapping (bypasses trash)
	// Parameters:
	//   $1: User ID
	//   $2: Role ID
	// Business Logic:
	//   - Deletes the record instead of soft-deleting
	//   - Use cautiously if audit/history is important
	RemoveRoleFromUser(ctx context.Context, arg RemoveRoleFromUserParams) error
	// RestoreAllBanners: Restore all trashed banners
	RestoreAllBanners(ctx context.Context) error
	// RestoreAllCategories: Recovers all trashed categories
	// Purpose: Bulk restore of all soft-deleted category records
	// Parameters: None
	// Returns: None
	// Business Logic:
	//   - Resets deleted_at for all soft-deleted records
	RestoreAllCategories(ctx context.Context) error
	// RestoreAllMerchantBusinessInformation: Restores all soft-deleted records
	// Purpose: Bulk recovery operation
	// Business Logic:
	//   - Clears deleted_at on all trashed records
	//   - Useful during data recovery or admin resets
	RestoreAllMerchantBusinessInformation(ctx context.Context) error
	// RestoreAllMerchantCertificationsAndAwards: Restores all soft-deleted certifications
	// Purpose: Bulk restore operation
	// Business Logic:
	//   - Clears deleted_at field from all trashed records
	//   - Useful for recovery or admin batch restore
	RestoreAllMerchantCertificationsAndAwards(ctx context.Context) error
	// RestoreAllMerchantDetails: Restores all soft-deleted merchant details
	RestoreAllMerchantDetails(ctx context.Context) error
	RestoreAllMerchantDocuments(ctx context.Context) error
	// RestoreAllMerchantPolicies: Restores all soft-deleted merchant policies
	// Purpose: Bulk recovery operation
	// Business Logic:
	//   - Clears deleted_at on all trashed records
	RestoreAllMerchantPolicies(ctx context.Context) error
	// RestoreAllMerchantSocialMediaLinks: Restores all soft-deleted social media links
	// Purpose: Bulk recovery operation
	// Business Logic:
	//   - Clears deleted_at on all trashed records
	RestoreAllMerchantSocialMediaLinks(ctx context.Context) error
	// RestoreAllMerchants: Mass restoration of deleted merchants
	// Purpose: Recover all trashed merchants at once
	// Business Logic:
	//   - Reactivates all soft-deleted merchants
	//   - No parameters needed (bulk operation)
	//   - Typically used during system recovery
	//   - Maintains original merchant data
	RestoreAllMerchants(ctx context.Context) error
	// RestoreAllOrders: Mass restoration of cancelled orders
	// Purpose: Recover all trashed orders at once
	// Business Logic:
	//   - Reactivates all soft-deleted orders
	//   - No parameters needed (bulk operation)
	//   - Typically used during system recovery
	RestoreAllOrders(ctx context.Context) error
	// RestoreAllOrdersItem: Restores all soft-deleted order items
	// Purpose: Mass recovery of trashed items
	// Parameters: None
	// Returns: None
	// Business Logic:
	//   - Resets deleted_at to NULL for all trashed items
	RestoreAllOrdersItem(ctx context.Context) error
	// RestoreAllProducts: Recovers all soft-deleted products
	// Purpose: Bulk restore from trash/recycle bin
	// Parameters: None
	// Returns:
	//   Nothing (exec-only)
	// Business Logic:
	//   - Clears deleted_at for all trashed products
	//   - Admin-level operation
	//   - Returns all products to active status
	RestoreAllProducts(ctx context.Context) error
	// RestoreAllReviewDetails: Restores all soft-deleted review details
	// Parameters: None
	// Business Logic:
	//   - Sets deleted_at to NULL for all trashed records
	// Returns: No return value (exec command)
	RestoreAllReviewDetails(ctx context.Context) error
	// RestoreAllReviews: Recovers all soft-deleted reviews
	// Purpose: Bulk restore from trash/recycle bin
	// Parameters: None
	// Returns:
	//   Nothing (exec-only)
	// Business Logic:
	//   - Clears deleted_at for all trashed reviews
	//   - Admin-level operation
	//   - Returns all reviews to active status
	RestoreAllReviews(ctx context.Context) error
	// RestoreAllRoles: Restores all soft-deleted roles in bulk
	// Purpose: Bulk recovery of all trashed roles
	// Parameters: None
	RestoreAllRoles(ctx context.Context) error
	// RestoreAllShippingAddress: Recovers all trashed shipping addresses
	// Memulihkan semua alamat pengiriman yang dihapus sementara
	// Parameters: None
	// Returns:
	//   Nothing (exec-only)
	// Business Logic:
	//   - Admin-level bulk restore operation
	//   - Operasi pemulihan massal level admin
	RestoreAllShippingAddress(ctx context.Context) error
	// RestoreAllSliders: Recovers all trashed sliders
	// Memulihkan semua slider yang dihapus sementara
	// Parameters: None
	// Returns:
	//   Nothing (exec-only)
	// Business Logic:
	//   - Admin-level bulk restore operation
	//   - Operasi pemulihan massal level admin
	RestoreAllSliders(ctx context.Context) error
	// RestoreAllTransactions: Mass restoration of cancelled transactions
	// Purpose: Recover all trashed transactions at once
	// Business Logic:
	//   - Reactivates all soft-deleted transactions
	//   - No parameters needed (bulk operation)
	//   - Typically used during system recovery
	RestoreAllTransactions(ctx context.Context) error
	// RestoreAllUsers: Mass restoration of deleted users
	// Purpose: Recover all trashed users at once
	// Business Logic:
	//   - Reactivates all soft-deleted users
	//   - No parameters needed (bulk operation)
	//   - Typically used during system recovery
	//   - Maintains all original user data
	RestoreAllUsers(ctx context.Context) error
	// RestoreBanner: Restores a soft-deleted banner
	// Parameters:
	//   $1: banner_id
	// Returns: The restored banner
	RestoreBanner(ctx context.Context, bannerID int32) (*Banner, error)
	// RestoreCategory: Recovers a previously trashed category
	// Purpose: Restores a soft-deleted category for reuse
	// Parameters:
	//   $1: Category ID
	// Returns:
	//   Restored category record
	// Business Logic:
	//   - Only applies to categories currently marked as deleted
	RestoreCategory(ctx context.Context, categoryID int32) (*Category, error)
	// RestoreMerchant: Recovers a soft-deleted merchant
	// Purpose: Reactivate a previously deactivated merchant
	// Parameters:
	//   $1: merchant_id - ID of merchant to restore
	// Returns: The restored merchant record
	// Business Logic:
	//   - Nullifies the deleted_at field
	//   - Only works on previously deleted records
	//   - Preserves all original merchant data
	//   - Reactivates associated services
	RestoreMerchant(ctx context.Context, merchantID int32) (*Merchant, error)
	// RestoreMerchantBusinessInformation: Restores a soft-deleted business info record
	// Purpose: Reactivate a previously trashed record
	// Parameters:
	//   $1: merchant_business_info_id
	// Returns: The restored business info record
	// Business Logic:
	//   - Clears deleted_at
	//   - Only works for soft-deleted entries
	RestoreMerchantBusinessInformation(ctx context.Context, merchantBusinessInfoID int32) (*MerchantBusinessInformation, error)
	// RestoreMerchantCertificationOrAward: Restores a soft-deleted certification
	// Purpose: Reactivate a previously deleted record
	// Parameters:
	//   $1: merchant_certification_id
	// Returns: The restored record
	// Business Logic:
	//   - Clears deleted_at
	//   - Only works on previously soft-deleted entries
	RestoreMerchantCertificationOrAward(ctx context.Context, merchantCertificationID int32) (*MerchantCertificationsAndAward, error)
	// RestoreMerchantDetail: Restores a soft-deleted merchant detail
	// Purpose: Reactivate previously hidden profile
	// Parameters:
	//   $1: merchant_detail_id
	// Returns: The restored record
	RestoreMerchantDetail(ctx context.Context, merchantDetailID int32) (*MerchantDetail, error)
	RestoreMerchantDocument(ctx context.Context, documentID int32) (*MerchantDocument, error)
	// RestoreMerchantPolicy: Restores a soft-deleted policy
	// Purpose: Reactivate a previously deleted policy
	// Parameters:
	//   $1: merchant_policy_id
	// Returns: The restored policy record
	// Business Logic:
	//   - Clears deleted_at
	//   - Only works on previously soft-deleted entries
	RestoreMerchantPolicy(ctx context.Context, merchantPolicyID int32) (*MerchantPolicy, error)
	// RestoreMerchantSocialMediaLink: Restores a soft-deleted social media link
	// Purpose: Reactivate a previously deleted link
	// Parameters:
	//   $1: merchant_social_id
	// Returns: The restored social media link
	// Business Logic:
	//   - Clears deleted_at
	//   - Only works on previously soft-deleted entries
	RestoreMerchantSocialMediaLink(ctx context.Context, merchantSocialID int32) (*MerchantSocialMediaLink, error)
	// RestoreOrder: Recovers a soft-deleted order
	// Purpose: Reactivate a cancelled order
	// Parameters:
	//   $1: order_id - UUID of order to restore
	// Returns: The restored order record
	// Business Logic:
	//   - Nullifies deleted_at field
	//   - Only works on previously cancelled orders
	//   - Maintains all original order data
	RestoreOrder(ctx context.Context, orderID int32) (*Order, error)
	// RestoreOrderItem: Restores a previously trashed order item
	// Purpose: Undoes a soft-delete action
	// Parameters:
	//   $1: order_item_id
	// Returns:
	//   The restored order item
	// Business Logic:
	//   - Only restores items currently soft-deleted
	RestoreOrderItem(ctx context.Context, orderID int32) (*OrderItem, error)
	// RestoreProduct: Recovers a soft-deleted product
	// Purpose: Reactivate previously trashed products
	// Parameters:
	//   $1: product_id - ID of product to restore
	// Returns:
	//   The restored product record
	// Business Logic:
	//   - Clears deleted_at timestamp
	//   - Only works on trashed products
	//   - Returns product to active status
	RestoreProduct(ctx context.Context, productID int32) (*Product, error)
	// RestoreReview: Recovers a soft-deleted review
	// Purpose: Reactivate previously trashed reviews
	// Parameters:
	//   $1: review_id - ID of review to restore
	// Returns:
	//   The restored review record
	// Business Logic:
	//   - Clears deleted_at timestamp
	//   - Only works on trashed reviews
	//   - Returns review to active status
	RestoreReview(ctx context.Context, reviewID int32) (*Review, error)
	// RestoreReviewDetail: Restores a soft-deleted review detail
	// Parameters:
	//   $1: review_detail_id - ID of the record to restore
	// Business Logic:
	//   - Only restores if deleted_at IS NOT NULL
	// Returns: The restored review detail
	RestoreReviewDetail(ctx context.Context, reviewDetailID int32) (*ReviewDetail, error)
	// RestoreRole: Restores a previously trashed role
	// Purpose: Undelete a soft-deleted role
	// Parameters:
	//   $1: Role ID
	RestoreRole(ctx context.Context, roleID int32) (*Role, error)
	// RestoreShippingAddress: Recovers a soft-deleted address
	// Memulihkan alamat pengiriman yang dihapus sementara
	// Parameters:
	//   $1: shipping_address_id - ID of address to restore
	// Returns:
	//   The restored shipping address record
	//   Record alamat pengiriman yang telah dipulihkan
	// Business Logic:
	//   - Clears the deleted_at field
	//   - Membersihkan field deleted_at
	RestoreShippingAddress(ctx context.Context, shippingAddressID int32) (*ShippingAddress, error)
	// RestoreSlider: Recovers a soft-deleted slider
	// Memulihkan slider yang dihapus sementara
	// Parameters:
	//   $1: slider_id - ID slider yang akan dipulihkan
	// Returns:
	//   The restored slider record
	//   Record slider yang telah dipulihkan
	// Business Logic:
	//   - Clears the deleted_at field
	//   - Membersihkan field deleted_at
	//   - Only works on trashed sliders
	//   - Hanya bekerja pada slider yang dihapus sementara
	RestoreSlider(ctx context.Context, sliderID int32) (*Slider, error)
	// RestoreTransaction: Recovers a soft-deleted transaction
	// Purpose: Reactivate a cancelled transaction
	// Parameters:
	//   $1: transaction_id - ID of transaction to restore
	// Returns: The restored transaction record
	// Business Logic:
	//   - Nullifies deleted_at field
	//   - Only works on previously cancelled transactions
	//   - Maintains all original transaction data
	RestoreTransaction(ctx context.Context, transactionID int32) (*Transaction, error)
	// RestoreUser: Recovers a soft-deleted user
	// Purpose: Reactivate a previously deactivated user
	// Parameters:
	//   $1: user_id - ID of user to restore
	// Returns: The restored user record
	// Business Logic:
	//   - Nullifies the deleted_at field
	//   - Only works on previously deleted users
	//   - Restores full account access
	//   - Maintains all original user data
	RestoreUser(ctx context.Context, userID int32) (*User, error)
	// RestoreUserRole: Restores a trashed user-role relation
	// Purpose: Reactivate a previously soft-deleted user-role
	// Parameters:
	//   $1: user_role_id
	// Business Logic:
	//   - Clears the deleted_at field to mark as active again
	RestoreUserRole(ctx context.Context, userRoleID int32) error
	// TrashBanner: Soft deletes a banner
	// Parameters:
	//   $1: banner_id
	// Returns: The trashed banner
	TrashBanner(ctx context.Context, bannerID int32) (*Banner, error)
	// TrashCategory: Soft-deletes a category
	// Purpose: Moves category to trash without permanent deletion
	// Parameters:
	//   $1: Category ID
	// Returns:
	//   The soft-deleted category record
	// Business Logic:
	//   - Updates deleted_at with current timestamp
	//   - Prevents repeat trashing of already-deleted records
	TrashCategory(ctx context.Context, categoryID int32) (*Category, error)
	// TrashMerchant: Soft-deletes a merchant account
	// Purpose: Deactivate merchant without permanent deletion
	// Parameters:
	//   $1: merchant_id - ID of merchant to deactivate
	// Returns: The soft-deleted merchant record
	// Business Logic:
	//   - Sets deleted_at timestamp to current time
	//   - Only processes currently active records
	//   - Allows recovery via restore function
	//   - Maintains referential integrity
	TrashMerchant(ctx context.Context, merchantID int32) (*Merchant, error)
	// TrashMerchantBusinessInformation: Soft-deletes a business info record
	// Purpose: Deactivate business info without removing from DB
	// Parameters:
	//   $1: merchant_business_info_id
	// Returns: The soft-deleted record
	// Business Logic:
	//   - Sets deleted_at timestamp
	//   - Only affects active records
	TrashMerchantBusinessInformation(ctx context.Context, merchantBusinessInfoID int32) (*MerchantBusinessInformation, error)
	// TrashMerchantCertificationOrAward: Soft-deletes a certification or award
	// Purpose: Deactivate a record without permanent deletion
	// Parameters:
	//   $1: merchant_certification_id
	// Returns: The soft-deleted certification record
	// Business Logic:
	//   - Sets deleted_at timestamp
	//   - Only affects active records
	TrashMerchantCertificationOrAward(ctx context.Context, merchantCertificationID int32) (*MerchantCertificationsAndAward, error)
	// TrashMerchantDetail: Soft-deletes a merchant detail
	// Purpose: Temporarily hide the merchant profile
	// Parameters:
	//   $1: merchant_detail_id
	// Returns: The soft-deleted detail record
	TrashMerchantDetail(ctx context.Context, merchantDetailID int32) (*MerchantDetail, error)
	TrashMerchantDocument(ctx context.Context, documentID int32) (*MerchantDocument, error)
	// TrashMerchantPolicy: Soft-deletes a merchant policy
	// Purpose: Temporarily deactivate a policy without permanent deletion
	// Parameters:
	//   $1: merchant_policy_id
	// Returns: The soft-deleted policy record
	// Business Logic:
	//   - Sets deleted_at timestamp
	//   - Only affects active records
	TrashMerchantPolicy(ctx context.Context, merchantPolicyID int32) (*MerchantPolicy, error)
	// TrashMerchantSocialMediaLink: Soft-deletes a merchant social media link
	// Purpose: Temporarily deactivate a link without permanent deletion
	// Parameters:
	//   $1: merchant_social_id
	// Returns: The soft-deleted social media link
	// Business Logic:
	//   - Sets deleted_at timestamp
	//   - Only affects active records
	TrashMerchantSocialMediaLink(ctx context.Context, merchantSocialID int32) (*MerchantSocialMediaLink, error)
	// TrashOrderItem: Soft-deletes a specific order item
	// Purpose: Marks an item as deleted without removing it from DB
	// Parameters:
	//   $1: order_item_id
	// Returns:
	//   The soft-deleted order item
	// Business Logic:
	//   - Preserves record for potential restoration or audit
	TrashOrderItem(ctx context.Context, orderID int32) (*OrderItem, error)
	// TrashProduct: Soft-deletes a product
	// Purpose: Remove product from storefront while preserving data
	// Parameters:
	//   $1: product_id - ID of product to trash
	// Returns:
	//   The trashed product record
	// Business Logic:
	//   - Sets deleted_at timestamp
	//   - Only works on active products
	//   - Allows recovery via RestoreProduct
	TrashProduct(ctx context.Context, productID int32) (*Product, error)
	// TrashReview: Soft-deletes a review
	// Purpose: Remove review from public view while preserving data
	// Parameters:
	//   $1: review_id - ID of review to trash
	// Returns:
	//   The trashed review record
	// Business Logic:
	//   - Sets deleted_at timestamp
	//   - Only works on active reviews
	//   - Allows recovery via RestoreReview
	TrashReview(ctx context.Context, reviewID int32) (*Review, error)
	// TrashReviewDetail: Soft deletes a review detail
	// Parameters:
	//   $1: review_detail_id - ID of the record to soft delete
	// Business Logic:
	//   - Only applies soft-delete if record is not already trashed
	// Returns: The soft-deleted review detail
	TrashReviewDetail(ctx context.Context, reviewDetailID int32) (*ReviewDetail, error)
	// TrashRole: Soft-deletes a role (moves to trash)
	// Purpose: Mark role as deleted without removing it permanently
	// Parameters:
	//   $1: Role ID
	TrashRole(ctx context.Context, roleID int32) (*Role, error)
	// TrashShippingAddress: Soft-deletes a shipping address
	// Menghapus sementara alamat pengiriman (soft delete)
	// Parameters:
	//   $1: shipping_address_id - ID of address to trash
	// Returns:
	//   The trashed shipping address record
	//   Record alamat pengiriman yang telah dihapus sementara
	// Business Logic:
	//   - Sets deleted_at timestamp for soft deletion
	//   - Menandai deleted_at untuk penghapusan sementara
	TrashShippingAddress(ctx context.Context, shippingAddressID int32) (*ShippingAddress, error)
	// TrashSlider: Soft-deletes a slider
	// Menghapus sementara slider (soft delete)
	// Parameters:
	//   $1: slider_id - ID slider yang akan dihapus
	// Returns:
	//   The trashed slider record
	//   Record slider yang telah dihapus sementara
	// Business Logic:
	//   - Sets deleted_at timestamp
	//   - Menandai deleted_at timestamp
	//   - Only works on active sliders
	//   - Hanya bekerja pada slider aktif
	TrashSlider(ctx context.Context, sliderID int32) (*Slider, error)
	// TrashTransaction: Soft-deletes a transaction
	// Purpose: Void/cancel a transaction without permanent deletion
	// Parameters:
	//   $1: transaction_id - ID of transaction to cancel
	// Returns: The soft-deleted transaction record
	// Business Logic:
	//   - Sets deleted_at to current timestamp
	//   - Preserves transaction for reporting
	//   - Only processes active transactions
	//   - Can be restored if needed
	TrashTransaction(ctx context.Context, transactionID int32) (*Transaction, error)
	// TrashUser: Soft-deletes a user account
	// Purpose: Deactivate user without permanent deletion
	// Parameters:
	//   $1: user_id - ID of user to deactivate
	// Returns: The soft-deleted user record
	// Business Logic:
	//   - Sets deleted_at timestamp to current time
	//   - Only processes currently active users
	//   - Preserves all user data for potential restoration
	//   - Prevents login while deleted
	TrashUser(ctx context.Context, userID int32) (*User, error)
	// TrashUserRole: Soft deletes a user-role mapping (moves to trash)
	// Purpose: Temporarily disable a role assignment without permanent deletion
	// Parameters:
	//   $1: user_role_id (primary key of the mapping)
	// Business Logic:
	//   - Sets deleted_at timestamp, indicating the relation is inactive
	TrashUserRole(ctx context.Context, userRoleID int32) error
	// TrashedOrder: Soft-deletes an order
	// Purpose: Cancel/void an order without permanent deletion
	// Parameters:
	//   $1: order_id - UUID of order to cancel
	// Returns: The soft-deleted order record
	// Business Logic:
	//   - Sets deleted_at to current timestamp
	//   - Preserves order data for reporting
	//   - Only processes active orders
	//   - Can be restored via RestoreOrder
	TrashedOrder(ctx context.Context, orderID int32) (*Order, error)
	// UpdateBanner: Updates an existing banner
	// Parameters:
	//   $1: banner_id
	//   $2: name
	//   $3: start_date
	//   $4: end_date
	//   $5: start_time
	//   $6: end_time
	//   $7: is_active
	// Returns: The updated banner
	UpdateBanner(ctx context.Context, arg UpdateBannerParams) (*Banner, error)
	// UpdateCategory: Updates category details
	// Purpose: Modify existing category data while maintaining soft delete integrity
	// Parameters:
	//   $1: Category ID
	//   $2: Updated name
	//   $3: Updated description
	//   $4: Updated slug
	// Returns:
	//   Updated category record
	// Business Logic:
	//   - Automatically updates the updated_at field
	//   - Skips if category has been soft-deleted
	UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (*Category, error)
	// UpdateMerchant: Modifies merchant information
	// Purpose: Update merchant profile details
	// Parameters:
	//   $1: merchant_id - Target merchant ID
	//   $2: name - Updated business name
	//   $3: description - Updated description
	//   $4: address - Updated physical address
	//   $5: contact_email - Updated email
	//   $6: contact_phone - Updated phone
	//   $7: status - Updated account status
	// Returns: Updated merchant record
	// Business Logic:
	//   - Automatically updates updated_at timestamp
	//   - Only affects active (non-deleted) records
	//   - Validates all required fields
	//   - Returns modified record for confirmation
	UpdateMerchant(ctx context.Context, arg UpdateMerchantParams) (*Merchant, error)
	// UpdateMerchantBusinessInformation: Updates existing business info
	// Purpose: Modify business information details
	// Parameters:
	//   $1: merchant_business_info_id
	//   $2: business_type
	//   $3: tax_id
	//   $4: established_year
	//   $5: number_of_employees
	//   $6: website_url
	// Returns: The updated business info record
	// Business Logic:
	//   - Only affects active (non-deleted) records
	//   - Automatically updates the updated_at timestamp
	UpdateMerchantBusinessInformation(ctx context.Context, arg UpdateMerchantBusinessInformationParams) (*MerchantBusinessInformation, error)
	// UpdateMerchantCertificationOrAward: Updates an existing certification or award
	// Purpose: Modify certification or award details
	// Parameters:
	//   $1: merchant_certification_id
	//   $2: title
	//   $3: description
	//   $4: issued_by
	//   $5: issue_date
	//   $6: expiry_date
	//   $7: certificate_url
	// Returns: The updated certification record
	// Business Logic:
	//   - Only affects active (non-deleted) records
	//   - Automatically updates the updated_at timestamp
	UpdateMerchantCertificationOrAward(ctx context.Context, arg UpdateMerchantCertificationOrAwardParams) (*MerchantCertificationsAndAward, error)
	// UpdateMerchantDetail: Updates an existing merchant detail record
	// Purpose: Modify merchant profile
	// Parameters:
	//   $1: merchant_detail_id
	//   $2: display_name
	//   $3: cover_image_url
	//   $4: logo_url
	//   $5: short_description
	//   $6: website_url
	// Returns: The updated merchant detail
	UpdateMerchantDetail(ctx context.Context, arg UpdateMerchantDetailParams) (*MerchantDetail, error)
	UpdateMerchantDocument(ctx context.Context, arg UpdateMerchantDocumentParams) (*MerchantDocument, error)
	UpdateMerchantDocumentStatus(ctx context.Context, arg UpdateMerchantDocumentStatusParams) (*MerchantDocument, error)
	// UpdateMerchantPolicy: Updates an existing merchant policy
	// Purpose: Modify policy details
	// Parameters:
	//   $1: merchant_policy_id
	//   $2: policy_type
	//   $3: title
	//   $4: description
	// Returns: The updated policy record
	// Business Logic:
	//   - Only affects active (non-deleted) records
	//   - Automatically updates updated_at timestamps
	UpdateMerchantPolicy(ctx context.Context, arg UpdateMerchantPolicyParams) (*MerchantPolicy, error)
	// UpdateMerchantSocialMediaLink: Updates an existing merchant social media link
	// Purpose: Modify platform or URL
	// Parameters:
	//   $1: merchant_social_id
	//   $2: platform
	//   $3: url
	// Returns: The updated social media link
	// Business Logic:
	//   - Automatically updates updated_at timestamps
	//   - Only affects non-deleted records
	UpdateMerchantSocialMediaLink(ctx context.Context, arg UpdateMerchantSocialMediaLinkParams) (*MerchantSocialMediaLink, error)
	UpdateMerchantStatus(ctx context.Context, arg UpdateMerchantStatusParams) (*Merchant, error)
	// UpdateOrder: Modifies order information
	// Purpose: Update order details (primarily total price)
	// Parameters:
	//   $1: order_id - UUID of order to update
	//   $2: total_price - New total amount
	// Returns: Updated order record
	// Business Logic:
	//   - Auto-updates updated_at timestamp
	//   - Only modifies active (non-deleted) orders
	//   - Used when order items change
	//   - Should trigger recalculation of total_price
	UpdateOrder(ctx context.Context, arg UpdateOrderParams) (*Order, error)
	// UpdateOrderItem: Updates quantity and price of an existing order item
	// Purpose: Allows modification of product details in an order
	// Parameters:
	//   $1: order_item_id
	//   $2: new quantity
	//   $3: new price
	// Returns:
	//   The updated order item
	// Business Logic:
	//   - Applies changes only to active items
	//   - Automatically updates `updated_at` timestamp
	UpdateOrderItem(ctx context.Context, arg UpdateOrderItemParams) (*OrderItem, error)
	// UpdateProduct: Modifies all product details
	// Purpose: Edit product information in merchant dashboard
	// Parameters:
	//   $1: product_id - ID of product to update
	//   $2-$11: All product fields (category_id through image_product)
	// Returns:
	//   The updated product record
	// Business Logic:
	//   - Updates all mutable product fields
	//   - Only works on active (non-deleted) products
	//   - Automatically sets updated_at timestamp
	UpdateProduct(ctx context.Context, arg UpdateProductParams) (*Product, error)
	// UpdateProductCountStock: Adjusts product inventory count
	// Purpose: Update stock levels after purchases/restocking
	// Parameters:
	//   $1: product_id - ID of product to update
	//   $2: count_in_stock - New inventory quantity
	// Returns:
	//   The updated product record
	// Business Logic:
	//   - Only modifies stock count
	//   - Verifies product is active
	//   - Used during order processing
	UpdateProductCountStock(ctx context.Context, arg UpdateProductCountStockParams) (*Product, error)
	// UpdateRefreshTokenByUserId: Updates refresh token for a user
	// Purpose: Rotate/refresh token for a user
	// Parameters:
	//   $1: user_id - ID of the user to update token for
	//   $2: token - New token string
	//   $3: expiration - New expiration timestamp
	// Business Logic:
	//   - Updates token and expiration fields
	//   - Sets updated_at to current time
	//   - Only modifies active tokens
	//   - Used during token rotation flows
	UpdateRefreshTokenByUserId(ctx context.Context, arg UpdateRefreshTokenByUserIdParams) (*RefreshToken, error)
	// UpdateReview: Modifies an existing review
	// Purpose: Allow users to edit their reviews
	// Parameters:
	//   $1: review_id - ID of review to update
	//   $2: name - Updated display name
	//   $3: comment - Updated review text
	//   $4: rating - Updated numeric rating
	// Returns:
	//   The updated review record
	// Business Logic:
	//   - Only updates mutable review fields
	//   - Requires review to be active (not deleted)
	//   - Automatically updates timestamp
	UpdateReview(ctx context.Context, arg UpdateReviewParams) (*Review, error)
	// UpdateReviewDetail: Updates an existing review detail
	// Parameters:
	//   $1: type - New media type
	//   $2: url - New media URL
	//   $3: caption - Updated caption
	//   $4: review_detail_id - Target record to update
	// Returns: The updated review detail record
	UpdateReviewDetail(ctx context.Context, arg UpdateReviewDetailParams) (*ReviewDetail, error)
	// UpdateRole: Updates role name by ID
	// Purpose: Modify role information (e.g., name correction)
	// Parameters:
	//   $1: Role ID
	//   $2: New role name
	// Returns:
	//   Updated role's data
	UpdateRole(ctx context.Context, arg UpdateRoleParams) (*Role, error)
	// UpdateShippingAddress: Modifies an existing shipping address
	// Memperbarui alamat pengiriman yang sudah ada
	// Parameters:
	//   $1: shipping_address_id - ID of address to update
	//   $2-$8: Updated address fields (alamat to shipping_cost)
	// Returns:
	//   The updated shipping address record
	//   Record alamat pengiriman yang telah diperbarui
	// Business Logic:
	//   - Only updates active (non-deleted) addresses
	//   - Automatically updates the timestamp
	//   - Hanya memperbarui alamat aktif (tidak terhapus)
	//   - Secara otomatis memperbarui timestamp
	UpdateShippingAddress(ctx context.Context, arg UpdateShippingAddressParams) (*ShippingAddress, error)
	// UpdateSlider: Modifies an existing slider
	// Memperbarui slider yang sudah ada
	// Parameters:
	//   $1: slider_id - ID slider yang akan diperbarui
	//   $2: name - Nama baru slider
	//   $3: image - URL gambar baru slider
	// Returns:
	//   The updated slider record
	//   Record slider yang telah diperbarui
	// Business Logic:
	//   - Updates both name and image
	//   - Memperbarui nama dan gambar
	//   - Only works on active sliders
	//   - Hanya bekerja pada slider aktif
	//   - Automatically updates timestamp
	//   - Otomatis memperbarui timestamp
	UpdateSlider(ctx context.Context, arg UpdateSliderParams) (*Slider, error)
	// UpdateTransaction: Modifies transaction details
	// Purpose: Update transaction information
	// Parameters:
	//   $1: transaction_id - ID of transaction to update
	//   $2: merchant_id - Updated merchant reference
	//   $3: payment_method - Updated payment method
	//   $4: amount - Updated transaction amount
	//   $5: change_amount - Updated change amount
	//   $6: payment_status - Updated payment status
	//   $7: order_id - Updated order reference
	// Returns: Updated transaction record
	// Business Logic:
	//   - Auto-updates updated_at timestamp
	//   - Only modifies active transactions
	//   - Validates all payment fields
	//   - Used for payment corrections/updates
	UpdateTransaction(ctx context.Context, arg UpdateTransactionParams) (*Transaction, error)
	// UpdateUser: Modifies user account information
	// Purpose: Update user profile details
	// Parameters:
	//   $1: user_id - ID of user to update
	//   $2: firstname - Updated first name
	//   $3: lastname - Updated last name
	//   $4: email - Updated email address
	//   $5: password - New hashed password (optional)
	// Returns: Updated user record
	// Business Logic:
	//   - Auto-updates updated_at timestamp
	//   - Only modifies active (non-deleted) users
	//   - Validates email uniqueness
	//   - Password field optional (can maintain existing)
	UpdateUser(ctx context.Context, arg UpdateUserParams) (*User, error)
	UpdateUserIsVerified(ctx context.Context, arg UpdateUserIsVerifiedParams) (*User, error)
	UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) (*User, error)
}

var _ Querier = (*Queries)(nil)
