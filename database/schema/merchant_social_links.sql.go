// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: merchant_social_links.sql

package db

import (
	"context"
)

const createMerchantSocialMediaLink = `-- name: CreateMerchantSocialMediaLink :one
INSERT INTO merchant_social_media_links (
    merchant_detail_id,
    platform,
    url
) VALUES (
    $1, $2, $3
)
RETURNING merchant_social_id, merchant_detail_id, platform, url, created_at, updated_at
`

type CreateMerchantSocialMediaLinkParams struct {
	MerchantDetailID int32  `json:"merchant_detail_id"`
	Platform         string `json:"platform"`
	Url              string `json:"url"`
}

// CreateMerchantSocialMediaLink: Inserts a new merchant social media link
// Purpose: Register a new social media link for a merchant
// Parameters:
//
//	$1: merchant_detail_id
//	$2: platform
//	$3: url
//
// Returns: The newly created social media link
// Business Logic:
//   - Sets created_at, updated_at automatically
func (q *Queries) CreateMerchantSocialMediaLink(ctx context.Context, arg CreateMerchantSocialMediaLinkParams) (*MerchantSocialMediaLink, error) {
	row := q.db.QueryRowContext(ctx, createMerchantSocialMediaLink, arg.MerchantDetailID, arg.Platform, arg.Url)
	var i MerchantSocialMediaLink
	err := row.Scan(
		&i.MerchantSocialID,
		&i.MerchantDetailID,
		&i.Platform,
		&i.Url,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const deleteAllMerchantSocialMediaLinksPermanently = `-- name: DeleteAllMerchantSocialMediaLinksPermanently :exec
DELETE FROM merchant_social_media_links
WHERE deleted_at IS NOT NULL
`

// DeleteAllMerchantSocialMediaLinksPermanently: Hard-deletes all soft-deleted social media links
// Purpose: Permanently remove all trashed links
// Business Logic:
//   - Irreversible delete
//   - Only affects already soft-deleted records
func (q *Queries) DeleteAllMerchantSocialMediaLinksPermanently(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllMerchantSocialMediaLinksPermanently)
	return err
}

const deleteMerchantSocialMediaLinkPermanently = `-- name: DeleteMerchantSocialMediaLinkPermanently :exec
DELETE FROM merchant_social_media_links
WHERE merchant_social_id = $1
`

// DeleteMerchantSocialMediaLinkPermanently: Hard-deletes a social media link
// Purpose: Permanently remove a link
// Parameters:
//
//	$1: merchant_social_id
func (q *Queries) DeleteMerchantSocialMediaLinkPermanently(ctx context.Context, merchantSocialID int32) error {
	_, err := q.db.ExecContext(ctx, deleteMerchantSocialMediaLinkPermanently, merchantSocialID)
	return err
}

const restoreAllMerchantSocialMediaLinks = `-- name: RestoreAllMerchantSocialMediaLinks :exec
UPDATE merchant_social_media_links
SET deleted_at = NULL
WHERE deleted_at IS NOT NULL
`

// RestoreAllMerchantSocialMediaLinks: Restores all soft-deleted social media links
// Purpose: Bulk recovery operation
// Business Logic:
//   - Clears deleted_at on all trashed records
func (q *Queries) RestoreAllMerchantSocialMediaLinks(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, restoreAllMerchantSocialMediaLinks)
	return err
}

const restoreMerchantSocialMediaLink = `-- name: RestoreMerchantSocialMediaLink :one
UPDATE merchant_social_media_links
SET deleted_at = NULL
WHERE merchant_social_id = $1
  AND deleted_at IS NOT NULL
RETURNING merchant_social_id, merchant_detail_id, platform, url, created_at, updated_at
`

// RestoreMerchantSocialMediaLink: Restores a soft-deleted social media link
// Purpose: Reactivate a previously deleted link
// Parameters:
//
//	$1: merchant_social_id
//
// Returns: The restored social media link
// Business Logic:
//   - Clears deleted_at
//   - Only works on previously soft-deleted entries
func (q *Queries) RestoreMerchantSocialMediaLink(ctx context.Context, merchantSocialID int32) (*MerchantSocialMediaLink, error) {
	row := q.db.QueryRowContext(ctx, restoreMerchantSocialMediaLink, merchantSocialID)
	var i MerchantSocialMediaLink
	err := row.Scan(
		&i.MerchantSocialID,
		&i.MerchantDetailID,
		&i.Platform,
		&i.Url,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const trashMerchantSocialMediaLink = `-- name: TrashMerchantSocialMediaLink :one
UPDATE merchant_social_media_links
SET deleted_at = CURRENT_TIMESTAMP
WHERE merchant_social_id = $1
  AND deleted_at IS NULL
RETURNING merchant_social_id, merchant_detail_id, platform, url, created_at, updated_at
`

// TrashMerchantSocialMediaLink: Soft-deletes a merchant social media link
// Purpose: Temporarily deactivate a link without permanent deletion
// Parameters:
//
//	$1: merchant_social_id
//
// Returns: The soft-deleted social media link
// Business Logic:
//   - Sets deleted_at timestamp
//   - Only affects active records
func (q *Queries) TrashMerchantSocialMediaLink(ctx context.Context, merchantSocialID int32) (*MerchantSocialMediaLink, error) {
	row := q.db.QueryRowContext(ctx, trashMerchantSocialMediaLink, merchantSocialID)
	var i MerchantSocialMediaLink
	err := row.Scan(
		&i.MerchantSocialID,
		&i.MerchantDetailID,
		&i.Platform,
		&i.Url,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const updateMerchantSocialMediaLink = `-- name: UpdateMerchantSocialMediaLink :one
UPDATE merchant_social_media_links
SET
    platform = $2,
    url = $3,
    updated_at = CURRENT_TIMESTAMP
WHERE
    merchant_social_id = $1
RETURNING merchant_social_id, merchant_detail_id, platform, url, created_at, updated_at
`

type UpdateMerchantSocialMediaLinkParams struct {
	MerchantSocialID int32  `json:"merchant_social_id"`
	Platform         string `json:"platform"`
	Url              string `json:"url"`
}

// UpdateMerchantSocialMediaLink: Updates an existing merchant social media link
// Purpose: Modify platform or URL
// Parameters:
//
//	$1: merchant_social_id
//	$2: platform
//	$3: url
//
// Returns: The updated social media link
// Business Logic:
//   - Automatically updates updated_at timestamps
//   - Only affects non-deleted records
func (q *Queries) UpdateMerchantSocialMediaLink(ctx context.Context, arg UpdateMerchantSocialMediaLinkParams) (*MerchantSocialMediaLink, error) {
	row := q.db.QueryRowContext(ctx, updateMerchantSocialMediaLink, arg.MerchantSocialID, arg.Platform, arg.Url)
	var i MerchantSocialMediaLink
	err := row.Scan(
		&i.MerchantSocialID,
		&i.MerchantDetailID,
		&i.Platform,
		&i.Url,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
